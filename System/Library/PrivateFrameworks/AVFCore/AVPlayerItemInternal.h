//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAsset, AVAudioMix, AVCustomVideoCompositorSession, AVMediaSelection, AVPlayerConnection, AVPlayerItem, AVPlayerItemInterstitialEventCollector, AVPlayerPlaybackCoordinator, AVVideoComposition, AVWeakReference, NSArray, NSDate, NSDictionary, NSError, NSMutableArray, NSMutableDictionary, NSPointerArray, NSString, NSURL;
@protocol AVLoggingIdentifier, AVPlayerItemDelegate, NSObject><NSCopying, OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface AVPlayerItemInternal : NSObject
{
    NSURL *URL;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *ivarAccessQueue;	// 16 = 0x10
    AVWeakReference *weakReference;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *figConfigurationQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *figPlaybackItemAccessorQueue;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *figPlaybackItemSetterQueue;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *seekQueue;	// 56 = 0x38
    struct OpaqueFigSimpleMutex *seekIDMutex;	// 64 = 0x40
    struct OpaqueVTPixelBufferAttributesMediator *pixelBufferAttributeMediator;	// 72 = 0x48
    struct OpaqueCMTimebase *proxyUnfoldedTimebase;	// 80 = 0x50
    struct OpaqueCMTimebase *proxyFoldedTimebase;	// 88 = 0x58
    NSArray *automaticallyLoadedAssetKeys;	// 96 = 0x60
    _Bool wasInitializedWithURL;	// 104 = 0x68
    AVAsset *asset;	// 112 = 0x70
    struct OpaqueFigPlaybackItem *figPlaybackItem;	// 120 = 0x78
    NSObject<OS_dispatch_queue> *stateDispatchQueue;	// 128 = 0x80
    NSArray *cachedTracks;	// 136 = 0x88
    NSArray *tracks;	// 144 = 0x90
    NSPointerArray *weakSyncLayers;	// 152 = 0x98
    NSArray *itemOutputs;	// 160 = 0xa0
    NSMutableArray *itemVideoOutputs;	// 168 = 0xa8
    NSMutableDictionary *itemLegibleOutputsForKeys;	// 176 = 0xb0
    NSMutableDictionary *itemMetadataOutputsForKeys;	// 184 = 0xb8
    _Bool suppressesVideoLayers;	// 192 = 0xc0
    struct OpaqueCMTimebase *foldedTimebase;	// 200 = 0xc8
    struct OpaqueCMTimebase *unfoldedFigTimebase;	// 208 = 0xd0
    _Bool didBecomeReadyForInspectionOfTracks;	// 216 = 0xd8
    _Bool didBecomeReadyForInspectionOfPresentationSize;	// 217 = 0xd9
    _Bool didBecomeReadyForInspectionOfDuration;	// 218 = 0xda
    _Bool figAssetDidBecomeReadyForInspectionOfMediaSelectionOptions;	// 219 = 0xdb
    _Bool didBecomeReadyForInspectionOfRecommendedTimeOffsetFromLive;	// 220 = 0xdc
    AVAsset *assetWithFigPlaybackItem;	// 224 = 0xe0
    NSArray *trackIDsForAssetWithFigPlaybackItem;	// 232 = 0xe8
    _Bool needTimedMetadataNotification;	// 240 = 0xf0
    _Bool didBecomeReadyForBasicInspection;	// 241 = 0xf1
    id <AVPlayerItemDelegate> delegate;	// 248 = 0xf8
    AVAudioMix *audioMix;	// 256 = 0x100
    long long status;	// 264 = 0x108
    NSError *error;	// 272 = 0x110
    CDStruct_1b6d18a9 forwardPlaybackEndTime;	// 280 = 0x118
    CDStruct_1b6d18a9 reversePlaybackEndTime;	// 304 = 0x130
    CDStruct_1b6d18a9 timeToPauseBuffering;	// 328 = 0x148
    CDStruct_1b6d18a9 timeToPausePlayback;	// 352 = 0x160
    CDStruct_1b6d18a9 advanceTimeForOverlappedPlayback;	// 376 = 0x178
    _Bool advanceTimeForOverlappedPlaybackWasSet;	// 400 = 0x190
    _Bool snapTimeToPausePlayback;	// 401 = 0x191
    _Bool preservesTimeOffsetFromLive;	// 402 = 0x192
    CDStruct_1b6d18a9 configuredTimeOffsetFromLive;	// 404 = 0x194
    CDStruct_1b6d18a9 recommendedTimeOffsetFromLive;	// 428 = 0x1ac
    CDStruct_1b6d18a9 duration;	// 452 = 0x1c4
    _Bool seekingWaitsForVideoCompositionRendering;	// 476 = 0x1dc
    NSArray *textStyleRules;	// 480 = 0x1e0
    NSArray *textHighlightArray;	// 488 = 0x1e8
    struct __CFString *initialFigTimePitchAlgorithm;	// 496 = 0x1f0
    _Bool canUseNetworkResourcesForLiveStreamingWhilePaused;	// 504 = 0x1f8
    CDStruct_1b6d18a9 maximumForwardBufferDuration;	// 508 = 0x1fc
    CDStruct_1b6d18a9 maximumTrailingBufferDuration;	// 532 = 0x214
    double preferredPeakBitRate;	// 560 = 0x230
    double preferredPeakBitRateForExpensiveNetworks;	// 568 = 0x238
    int startsOnFirstEligibleVariant;	// 576 = 0x240
    NSArray *itemCollectors;	// 584 = 0x248
    NSMutableArray *itemMetadataCollectors;	// 592 = 0x250
    AVPlayerItemInterstitialEventCollector *interstitialEventCollector;	// 600 = 0x258
    unsigned int RTCReportingFlags;	// 608 = 0x260
    NSString *reportingCategory;	// 616 = 0x268
    NSDictionary *gaplessInfo;	// 624 = 0x270
    float soundCheckVolumeNormalization;	// 632 = 0x278
    float volumeAdjustment;	// 636 = 0x27c
    NSDictionary *loudnessInfo;	// 640 = 0x280
    struct opaqueMTAudioProcessingTap *audioProcessingTap;	// 648 = 0x288
    _Bool adjustTargetLevelWasSet;	// 656 = 0x290
    float adjustTargetLevel;	// 660 = 0x294
    _Bool adjustCompressionProfileWasSet;	// 664 = 0x298
    unsigned int adjustCompressionProfile;	// 668 = 0x29c
    unsigned long long restrictions;	// 672 = 0x2a0
    _Bool initialLimitReadAhead;	// 680 = 0x2a8
    NSString *mediaKind;	// 688 = 0x2b0
    _Bool prefersSDRVideo;	// 696 = 0x2b8
    _Bool prefersSDRVideoWasSet;	// 697 = 0x2b9
    _Bool reversesMoreVideoFramesInMemory;	// 698 = 0x2ba
    _Bool reversesMoreVideoFramesInMemoryWasSet;	// 699 = 0x2bb
    _Bool aggressivelyCachesVideoFrames;	// 700 = 0x2bc
    _Bool aggressivelyCachesVideoFramesWasSet;	// 701 = 0x2bd
    _Bool decodesAllFramesDuringOrdinaryPlayback;	// 702 = 0x2be
    _Bool decodesAllFramesDuringOrdinaryPlaybackWasSet;	// 703 = 0x2bf
    _Bool initialContinuesPlayingDuringPrerollForSeek;	// 704 = 0x2c0
    _Bool initialContinuesPlayingDuringPrerollForRateChange;	// 705 = 0x2c1
    _Bool usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet;	// 706 = 0x2c2
    _Bool usesIFrameOnlyPlaybackForHighRateScaledEdits;	// 707 = 0x2c3
    CDStruct_1b6d18a9 minimumIntervalForIFrameOnlyPlayback;	// 708 = 0x2c4
    _Bool minimumIntervalForIFrameOnlyPlaybackWasSet;	// 732 = 0x2dc
    float speedThresholdForIFrameOnlyPlayback;	// 736 = 0x2e0
    _Bool speedThresholdForIFrameOnlyPlaybackWasSet;	// 740 = 0x2e4
    _Bool refreshesClosedCaptionsImmediatelyAfterSeeking;	// 741 = 0x2e5
    NSDate *initialDate;	// 744 = 0x2e8
    NSDate *initialEstimatedDate;	// 752 = 0x2f0
    _Bool requiresAccessLog;	// 760 = 0x2f8
    _Bool suppressesAudioOnlyVariants;	// 761 = 0x2f9
    _Bool prefersOfflinePlayableVariants;	// 762 = 0x2fa
    _Bool autoSwitchAtmosStreamVariants;	// 763 = 0x2fb
    unsigned long long variantPreferences;	// 768 = 0x300
    double preferredMaximumAudioSampleRate;	// 776 = 0x308
    NSArray *imageQueueInterpolationCurve;	// 784 = 0x310
    _Bool imageQueueInterpolationCurveWasSet;	// 792 = 0x318
    _Bool blendsVideoFrames;	// 793 = 0x319
    _Bool blendsVideoFramesWasSet;	// 794 = 0x31a
    _Bool appliesPerFrameHDRDisplayMetadata;	// 795 = 0x31b
    _Bool appliesPerFrameHDRDisplayMetadataWasSet;	// 796 = 0x31c
    NSString *videoApertureMode;	// 800 = 0x320
    _Bool usesMinimalLatencyForVideoCompositionRendering;	// 808 = 0x328
    _Bool initialAlwaysMonitorsPlayability;	// 809 = 0x329
    long long initialPlaybackLikelyToKeepUpTrigger;	// 816 = 0x330
    _Bool savesDownloadedDataToDiskWhenDone;	// 824 = 0x338
    _Bool savesDownloadedDataToDiskWhenDoneWasSet;	// 825 = 0x339
    _Bool allowProgressiveSwitchUp;	// 826 = 0x33a
    _Bool allowProgressiveStartup;	// 827 = 0x33b
    _Bool allowProgressiveResume;	// 828 = 0x33c
    struct CGSize IFramePrefetchTargetDimensions;	// 832 = 0x340
    id <NSObject><NSCopying> AVKitData;	// 848 = 0x350
    struct CGSize preferredMaximumResolution;	// 856 = 0x358
    struct CGSize preferredMaximumResolutionForExpensiveNetworks;	// 872 = 0x368
    struct CGSize preferredMinimumResolution;	// 888 = 0x378
    _Bool canPlayFastForward;	// 904 = 0x388
    _Bool canPlayFastReverse;	// 905 = 0x389
    _Bool canPlayReverse;	// 906 = 0x38a
    _Bool canPlaySlowReverse;	// 907 = 0x38b
    _Bool canPlaySlowForward;	// 908 = 0x38c
    _Bool canStepForward;	// 909 = 0x38d
    _Bool canStepBackward;	// 910 = 0x38e
    struct CGSize presentationSize;	// 912 = 0x390
    _Bool playbackBufferEmpty;	// 928 = 0x3a0
    _Bool playbackBufferFull;	// 929 = 0x3a1
    _Bool playbackLikelyToKeepUp;	// 930 = 0x3a2
    _Bool restrictsAutomaticMediaSelectionToAvailableOfflineOptions;	// 931 = 0x3a3
    _Bool nonForcedSubtitlesEnabled;	// 932 = 0x3a4
    _Bool hasEnabledVideo;	// 933 = 0x3a5
    _Bool hasVideo;	// 934 = 0x3a6
    _Bool hasEnabledAudio;	// 935 = 0x3a7
    _Bool hasEnqueuedVideoFrame;	// 936 = 0x3a8
    _Bool externalProtectionRequested;	// 937 = 0x3a9
    _Bool automaticallyHandlesInterstitialEvents;	// 938 = 0x3aa
    NSArray *seekableTimeRanges;	// 944 = 0x3b0
    double seekableTimeRangesLastModifiedTime;	// 952 = 0x3b8
    NSArray *loadedTimeRanges;	// 960 = 0x3c0
    CDStruct_e83c9415 loopTimeRange;	// 968 = 0x3c8
    id <AVLoggingIdentifier> loggingIdentifier;	// 1016 = 0x3f8
    AVMediaSelection *currentMediaSelection;	// 1024 = 0x400
    NSString *videoEnhancementMode;	// 1032 = 0x408
    _Bool isRenderingSpatialAudio;	// 1040 = 0x410
    AVPlayerPlaybackCoordinator *playerPlaybackCoordinator;	// 1048 = 0x418
    id coordinatedPlaybackIdentifierChangeNotificationToken;	// 1056 = 0x420
    _Bool timeJumpedNotificationIncludesExtendedDiagnosticPayload;	// 1064 = 0x428
    NSString *serviceIdentifier;	// 1072 = 0x430
    _Bool needToSeekAfterCreatingFigPlaybackItem;	// 1080 = 0x438
    CDStruct_1b6d18a9 initialTime;	// 1084 = 0x43c
    _Bool isInitialTimeDefault;	// 1108 = 0x454
    unsigned int initialSetTimeFlags;	// 1112 = 0x458
    CDStruct_1b6d18a9 initialMinSnapTime;	// 1116 = 0x45c
    CDStruct_1b6d18a9 initialMaxSnapTime;	// 1140 = 0x474
    unsigned int nextSeekIDToGenerate;	// 1164 = 0x48c
    int pendingSeekID;	// 1168 = 0x490
    CDUnknownBlockType seekCompletionHandler;	// 1176 = 0x498
    AVPlayerItem *previousItem;	// 1184 = 0x4a0
    AVPlayerItem *nextItem;	// 1192 = 0x4a8
    AVPlayerConnection *playerConnection;	// 1200 = 0x4b0
    _Bool initialWillNeverSeekBackwardsHint;	// 1208 = 0x4b8
    AVVideoComposition *videoComposition;	// 1216 = 0x4c0
    AVWeakReference *clientsOriginalVideoComposition;	// 1224 = 0x4c8
    AVCustomVideoCompositorSession *customVideoCompositorSession;	// 1232 = 0x4d0
    void *figVideoCompositor;	// 1240 = 0x4d8
    AVPlayerItem *interstitialTemplate;	// 1248 = 0x4e0
    NSString *interstitialEventID;	// 1256 = 0x4e8
    int eqPreset;	// 1264 = 0x4f0
    NSDictionary *rampInOutInfo;	// 1272 = 0x4f8
    NSDictionary *audibleDRMInfo;	// 1280 = 0x500
    long long initialVariantIndex;	// 1288 = 0x508
    NSString *currentStableVariantID;	// 1296 = 0x510
    NSMutableDictionary *mediaOptionsSelectedByClient;	// 1304 = 0x518
    NSArray *timedMetadata;	// 1312 = 0x520
    NSMutableArray *handlersToCallWhenReadyForEnqueueing;	// 1320 = 0x528
    _Bool haveInitialSamples;	// 1328 = 0x530
    _Bool haveCPEProtector;	// 1329 = 0x531
    _Bool didInformObserversAboutAvailabilityOfTracks;	// 1330 = 0x532
    _Bool didFireKVOForAssetForNonStreamingItem;	// 1331 = 0x533
    AVAudioMix *mostRecentlyAppliedAudioMix;	// 1336 = 0x538
    _Bool audioSpatializationAllowed;	// 1344 = 0x540
    _Bool audioSpatializationAllowedWasSet;	// 1345 = 0x541
    unsigned long long allowedAudioSpatializationFormats;	// 1352 = 0x548
    _Bool allowedAudioSpatializationFormatsWasSet;	// 1360 = 0x550
    AVWeakReference *playerReference;	// 1368 = 0x558
    _Bool didSetAssetToAssetWithFigPlaybackItem;	// 1376 = 0x560
    struct OpaqueFigCPEProtector *figCPEProtector;	// 1384 = 0x568
    double delayPreparingItemDuration;	// 1392 = 0x570
}

@end

