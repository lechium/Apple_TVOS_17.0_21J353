//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral)
- (id)createPeripheral;	// IMP=0x00200000007695a9
- (id)itemTitle;	// IMP=0x00200000007702b6
- (void)populateCell:(id)arg1;	// IMP=0x00200000007702b0
- (id)createPickerCell;	// IMP=0x00200000007702a8
- (id)createSelectedItem;	// IMP=0x00200000007702a0
- (id)_responderWindow;	// IMP=0x0020000000ceda1b
- (id)inputAssistantItem;	// IMP=0x0020000000ced9cb
- (id)_textInteraction;	// IMP=0x0020000000ced97b
- (id)_selectableText;	// IMP=0x0020000000ced972
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0020000000ced850
- (void)_unmarkText;	// IMP=0x0020000000ced65c
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000ced2b6
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000ced231
- (_Bool)_hasMarkedText;	// IMP=0x0020000000ced1af
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0020000000ced164
- (void)_setGestureRecognizers;	// IMP=0x0020000000cecdef
- (long long)_selectionAffinity;	// IMP=0x0020000000cecc46
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000cecbb5
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000cecb29
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cec954
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cec77f
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cec455
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cec12b
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cebf42
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cebddf
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cebb7c
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000ceb90d
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000ceb5f4
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000ceb2c4
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000ceaf8a
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cea9b7
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000cea728
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0020000000cea3c8
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000cea353
- (id)_fontForCaretSelection;	// IMP=0x0020000000cea195
- (id)_textColorForCaretSelection;	// IMP=0x0020000000ce9fd7
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0020000000ce9de8
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0020000000ce9d09
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0020000000ce94a0
- (id)_findDocumentBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000ce93ae
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000ce9178
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;	// IMP=0x0020000000ce9100
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0020000000ce8f9a
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0020000000ce8ddf
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0020000000ce8d5a
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0020000000ce8cb7
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0020000000ce8a5d
- (id)_fullRange;	// IMP=0x0020000000ce89b6
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0020000000ce899c
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0020000000ce8982
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0020000000ce8968
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000000ce894e
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0020000000ce8846
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0020000000ce8432
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0020000000ce8393
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0020000000ce828b
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0020000000ce81d1
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000000ce80f4
- (void)_transpose;	// IMP=0x0020000000ce7d7e
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000ce7b63
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000ce7b26
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0020000000ce79e9
- (void)_deleteToEndOfParagraph;	// IMP=0x0020000000ce77cb
- (void)_deleteToEndOfLine;	// IMP=0x0020000000ce75ad
- (void)_deleteToStartOfLine;	// IMP=0x0020000000ce738c
- (void)_deleteForwardByWord;	// IMP=0x0020000000ce7084
- (void)_deleteByWord;	// IMP=0x0020000000ce6ee5
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0020000000ce6e00
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0020000000ce6b28
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000000ce6950
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0020000000ce6936
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0020000000ce6882
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0020000000ce675d
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0020000000ce6746
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)arg1;	// IMP=0x0020000000ce635f
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0020000000ce61ad
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0020000000ce6019
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0020000000ce5f46
- (_Bool)_isEmptySelection;	// IMP=0x0020000000ce5e89
- (struct CGRect)_selectionClipRect;	// IMP=0x0020000000ce5e6b
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0020000000ce5d9e
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0020000000ce5cd1
- (_Bool)_selectionAtWordStart;	// IMP=0x0020000000ce5b92
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0020000000ce5af0
- (id)_fullText;	// IMP=0x0020000000ce5a22
- (id)_wordContainingCaretSelection;	// IMP=0x0020000000ce58e2
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0020000000ce5731
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0020000000ce544e
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000000ce5386
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0020000000ce536f
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0020000000ce535b
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0020000000ce521a
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0020000000ce5127
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0020000000ce508f
- (void)_selectAll;	// IMP=0x0020000000ce5022
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0020000000ce4e73
- (struct _NSRange)_selectedNSRange;	// IMP=0x0020000000ce4dda
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0020000000ce4b93
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x0020000001440e71
- (id)tagName;	// IMP=0x0020000001440e23
- (id)_realNode;	// IMP=0x0020000001443400
- (id)_textFormElement;	// IMP=0x002000000144357b
- (id)_previousAssistedNode;	// IMP=0x002000000144351d
- (id)_nextAssistedNode;	// IMP=0x00200000014434bf
- (void)_accessoryClear;	// IMP=0x00200000014434b9
- (_Bool)_supportsAccessoryClear;	// IMP=0x00200000014434b1
- (_Bool)_supportsAutoFill;	// IMP=0x00200000014434a9
- (_Bool)_requiresInputView;	// IMP=0x0020000001443497
- (_Bool)_requiresAccessoryView;	// IMP=0x0020000001443485
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x002000000144344e
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x0020000001443417
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x0020000001453d63
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x0020000001453d5b
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001453d49
- (_Bool)touchCalloutEnabled;	// IMP=0x0020000001453d41
- (id)tapHighlightColor;	// IMP=0x0020000001453d12
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x0020000001453d00
- (_Bool)showsTapHighlight;	// IMP=0x0020000001453cf8
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x0020000001463646
- (_Bool)isTextControl;	// IMP=0x002000000146363e
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x00200000014634fb
- (id)textDocument;	// IMP=0x0020000001466431
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x00200000014663d4
- (_Bool)editable;	// IMP=0x00200000014663cc
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x0020000001466155
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x002000000146614f
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0020000001466147
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00200000014660b5
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x002000000146603e
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001465fa9
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x0020000001465f26
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x0020000001465ead
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x0020000001465d32
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000001465bbe
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000001465b75
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000001465b07
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000001465abe
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x0020000001465a55
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x00200000014659d8
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000146598c
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x0020000001465941
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x00200000014658b6
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x00200000014657d6
- (void)moveUp;	// IMP=0x0020000001465769
- (void)moveLeft;	// IMP=0x00200000014656fc
- (void)moveRight;	// IMP=0x002000000146568f
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x002000000146556c
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x0020000001465454
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x002000000146543f
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x0020000001465427
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x002000000146532f
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x00200000014652db
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000146523f
- (id)textInRange:(id)arg1;	// IMP=0x00200000014651c6
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000001464fcc
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x0020000001464ef6
- (_Bool)becomesEditableWithGestures;	// IMP=0x0020000001464eee
- (_Bool)isEditing;	// IMP=0x0020000001464ee6
- (_Bool)isEditable;	// IMP=0x0020000001464ede
- (id)content;	// IMP=0x0020000001464ed6
- (void)updateSelection;	// IMP=0x0020000001464ed0
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x0020000001464e32
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x0020000001464dda
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x0020000001464dc0
- (void)updateAutoscroll:(id)arg1;	// IMP=0x0020000001464a1f
- (id)automaticallySelectedOverlay;	// IMP=0x00200000014649dc
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x00200000014649d6
- (int)initialSelectionBehavior;	// IMP=0x00200000014649ce
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x002000000146498e
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x002000000146490a
- (struct CGRect)caretRect;	// IMP=0x002000000146480b
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x00200000014647f1
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x002000000146476e
- (id)text;	// IMP=0x0020000001464718
- (void)setText:(id)arg1;	// IMP=0x0020000001464681
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x00200000014644fb
- (int)selectionState;	// IMP=0x00200000014644b8
- (void)selectAll;	// IMP=0x002000000146445b
- (_Bool)selectionAtWordStart;	// IMP=0x0020000001464418
- (_Bool)selectionAtDocumentStart;	// IMP=0x00200000014643d5
- (_Bool)hasSelection;	// IMP=0x0020000001464392
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x0020000001464309
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x00200000014642b9
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x0020000001464269
- (struct _NSRange)selectionRange;	// IMP=0x0020000001464226
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x00200000014641d4
- (id)textColorForCaretSelection;	// IMP=0x00200000014641bb
- (id)fontForCaretSelection;	// IMP=0x00200000014640b0
- (unsigned short)characterAfterCaretSelection;	// IMP=0x002000000146406d
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000001463f96
- (void)clearMarkedText;	// IMP=0x0020000001463f75
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x0020000001463ef9
- (void)confirmMarkedText:(id)arg1;	// IMP=0x0020000001463e0e
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000001463d44
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000001463cf4
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x0020000001463cc3
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x0020000001463c81
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x0020000001463c19
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x0020000001463bdb
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x0020000001463b85
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x0020000001463b45
- (void)endFloatingCursor;	// IMP=0x0020000001463b1a
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;	// IMP=0x0020000001463acf
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001463a8d
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001463a4b
- (id)uiWebDocumentView;	// IMP=0x0020000001463a08
- (void)insertText:(id)arg1;	// IMP=0x0020000001463987
- (void)deleteBackward;	// IMP=0x0020000001463909
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x00200000014638ca
- (void)beginSelectionChange;	// IMP=0x0020000001463899
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x0020000001463847
- (_Bool)requiresKeyEvents;	// IMP=0x002000000146383f
- (id)delegate;	// IMP=0x0020000001463837
- (void)setSecure:(_Bool)arg1;	// IMP=0x0020000001463831
- (id)textInputTraits;	// IMP=0x00200000014636e5
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x00200000014636df
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x0020000001463687
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x0020000001463656

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool _systemCursorAccessoriesDisabled;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool forceSpellingDictation;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(nonatomic) long long inlineCompletionType;
@property(nonatomic) long long inlinePredictionType;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

