//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <Foundation/NSError.h>

@class NSNumber, NSObject, NSURL;
@protocol OS_nw_path, OS_nw_resolution_report;

__attribute__((visibility("hidden")))
@interface NWURLError : NSError
{
    NSError *_underlyingError;	// 40 = 0x28
    NSURL *_failingURL;	// 48 = 0x30
    struct __SecTrust *_peerTrust;	// 56 = 0x38
    NSNumber *_networkUnavailableReason;	// 64 = 0x40
    NSNumber *_webSocketHandshakeFailureReason;	// 72 = 0x48
    NSNumber *_privacyProxyFailure;	// 80 = 0x50
    NSNumber *_vpnInactiveFailure;	// 88 = 0x58
    NSObject<OS_nw_path> *_path;	// 96 = 0x60
    NSObject<OS_nw_resolution_report> *_resolutionReport;	// 104 = 0x68
}

+ (id)allUserInfoKeys;	// IMP=0x00400000007cb050
- (void).cxx_destruct;	// IMP=0x00000000007ca950
@property(retain, nonatomic) NSObject<OS_nw_resolution_report> *resolutionReport; // @synthesize resolutionReport=_resolutionReport;
@property(retain, nonatomic) NSObject<OS_nw_path> *path; // @synthesize path=_path;
@property(retain, nonatomic) NSNumber *vpnInactiveFailure; // @synthesize vpnInactiveFailure=_vpnInactiveFailure;
@property(retain, nonatomic) NSNumber *privacyProxyFailure; // @synthesize privacyProxyFailure=_privacyProxyFailure;
@property(retain, nonatomic) NSNumber *webSocketHandshakeFailureReason; // @synthesize webSocketHandshakeFailureReason=_webSocketHandshakeFailureReason;
@property(retain, nonatomic) NSNumber *networkUnavailableReason; // @synthesize networkUnavailableReason=_networkUnavailableReason;
@property(nonatomic) struct __SecTrust *peerTrust; // @synthesize peerTrust=_peerTrust;
@property(retain, nonatomic) NSURL *failingURL; // @synthesize failingURL=_failingURL;
@property(retain, nonatomic) NSError *underlyingError; // @synthesize underlyingError=_underlyingError;
- (long long)translatePOSIXError:(long long)arg1;	// IMP=0x00000000007ca570
- (long long)getConnectionError;	// IMP=0x00000000007ca560
- (long long)translateTLSError:(long long)arg1;	// IMP=0x00000000007ca530
- (long long)translateDNSError:(long long)arg1;	// IMP=0x00000000007ca4f0
- (long long)translateCodeForError:(struct __CFError *)arg1;	// IMP=0x00000000007ca410
- (void)fillErrorForLoader:(id)arg1 andTask:(id)arg2;	// IMP=0x00000000007ca170
- (void)dealloc;	// IMP=0x00000000007ca0d0
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000007c9ea0
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000007c9cf0
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000007c9aa0
- (id)userInfo;	// IMP=0x00000000007c9a60

@end

