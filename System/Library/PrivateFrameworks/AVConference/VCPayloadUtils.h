//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

__attribute__((visibility("hidden")))
@interface VCPayloadUtils : NSObject
{
}

+ (int)audioCodecBandwidthForVCAudioCodecBandwidth:(int)arg1;	// IMP=0x008000000009c8d3
+ (int)vcAudioCodecBandwidthForAudioCodecBandwidth:(int)arg1;	// IMP=0x008000000009c8c2
+ (unsigned int)bitrateForEVSCodecMode:(int)arg1;	// IMP=0x008000000009c893
+ (unsigned int)bitrateForAMRWBCodecMode:(int)arg1;	// IMP=0x008000000009c79b
+ (unsigned int)bitrateForAMRCodecMode:(int)arg1;	// IMP=0x008000000009c6a3
+ (_Bool)supportsCodecBandwidthUpdateForCodecType:(long long)arg1;	// IMP=0x008000000009c692
+ (_Bool)supportsCodecRateModesForCodecType:(long long)arg1;	// IMP=0x008000000009c678
+ (unsigned int)bitrateForCodecType:(long long)arg1 mode:(int)arg2;	// IMP=0x008000000009c5a0
+ (int)payloadForCodecType:(long long)arg1;	// IMP=0x008000000009c30c
+ (long long)codecTypeForPayload:(int)arg1;	// IMP=0x008000000009c08c
+ (float)qualityForPayload:(int)arg1 forBitrate:(unsigned int)arg2;	// IMP=0x008000000009be93
+ (_Bool)shouldEnablePacketSizeLimitForAudioFormat:(struct AudioStreamBasicDescription *)arg1;	// IMP=0x008000000009be15
+ (unsigned int)internalBundleFactorForPayload:(int)arg1;	// IMP=0x008000000009be00
+ (_Bool)canBundleExternallyForPayload:(int)arg1 forBundlingScheme:(int)arg2 operatingMode:(int)arg3;	// IMP=0x008000000009bdb8
+ (_Bool)shouldUseCookieForPayload:(int)arg1;	// IMP=0x008000000009bd9c
+ (_Bool)skipBandWidthCheckForCodecRateModes:(int)arg1 supportedBitrates:(id)arg2;	// IMP=0x008000000009bbe0
+ (_Bool)isFormatAACELDNonSBR48KHzStereo:(const struct AudioStreamBasicDescription *)arg1;	// IMP=0x008000000009bb6a
+ (_Bool)isOpus4Channel48KhzPayload:(int)arg1 outFormat:(const struct AudioStreamBasicDescription *)arg2;	// IMP=0x008000000009bb44
+ (_Bool)isEVSPayload:(int)arg1;	// IMP=0x008000000009bb28
+ (_Bool)isCodecModeSupported:(int)arg1 forBandwidth:(int)arg2 withPayload:(int)arg3;	// IMP=0x008000000009bae6
+ (_Bool)isAMRCodecModeSupported:(int)arg1 forBandwidth:(int)arg2;	// IMP=0x008000000009bac8
+ (_Bool)isEVSCodecModeSupported:(int)arg1 forBandwidth:(int)arg2;	// IMP=0x008000000009ba73
+ (int)codecRateModeForDesiredANBR:(unsigned int)arg1 payload:(int)arg2 supportedBitrates:(id)arg3 supportedBandwidths:(id)arg4;	// IMP=0x008000000009b51e
+ (id)allowedBitratesForPayload:(int)arg1 supportedBitrates:(id)arg2 supportedBandwidths:(id)arg3;	// IMP=0x008000000009b251
+ (id)supportedCodecModesForBandwidth:(int)arg1 payload:(int)arg2;	// IMP=0x008000000009b1fe
+ (id)codecModesForEVS32kHz;	// IMP=0x008000000009b1f1
+ (id)codecModesForEVS16kHz;	// IMP=0x008000000009b1e4
+ (id)codecModesForEVS8kHz;	// IMP=0x008000000009b1d7
+ (id)codecModesForAMR16kHz;	// IMP=0x008000000009b1ca
+ (id)codecModesForAMR8kHz;	// IMP=0x008000000009b1bd
+ (int)codecBandwidthForPayload:(int)arg1;	// IMP=0x008000000009b190
+ (_Bool)canSetBitrateForPayload:(int)arg1;	// IMP=0x008000000009b174
+ (unsigned int)codecSamplesPerFrameForPayload:(int)arg1 blockSize:(double)arg2 sampleRate:(unsigned int)arg3;	// IMP=0x008000000009b012
+ (double)blockSizeForPayload:(int)arg1 sampleRate:(unsigned int)arg2;	// IMP=0x008000000009aff0
+ (double)opusSamplesPerFrameForSampleRate:(unsigned int)arg1 blockSize:(double)arg2;	// IMP=0x008000000009afd3
+ (unsigned int)codecSamplesPerFrameForPayload:(int)arg1 blockSize:(double)arg2;	// IMP=0x008000000009afb8
+ (unsigned int)audioCodecTypeForPayload:(int)arg1;	// IMP=0x008000000009ae90
+ (unsigned int)sampleRateForCodecBandwidth:(int)arg1;	// IMP=0x008000000009ae70
+ (unsigned int)sampleRateForPayload:(int)arg1;	// IMP=0x008000000009adab
+ (_Bool)isPayloadSupportedInFaceTime:(int)arg1;	// IMP=0x008000000009ad78
+ (_Bool)isUseCaseWatchContinuity:(int)arg1 primaryPayload:(int)arg2;	// IMP=0x008000000009ad5c

@end

