//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CAMetalLayer, MISSING_TYPE, MTLRenderPassDescriptor, NSMutableArray, NSMutableDictionary, NSString, SCNMTLMesh, SCNMTLMeshElement, SCNMTLRenderPipeline, SCNMTLResourceManager, SCNMTLShadable;
@protocol CAMetalDrawable, MTLBuffer, MTLCommandBuffer, MTLCommandQueue, MTLDepthStencilState, MTLDevice, MTLRenderCommandEncoder, MTLSamplerState, MTLTexture, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore, SCNMTLRenderContextCommandBufferStatusMonitor, SCNMTLRenderContextResourceManagerMonitor;

__attribute__((visibility("hidden")))
@interface SCNMTLRenderContext : NSObject
{
    long long _currentFrameIndex;	// 8 = 0x8
    struct __C3DEngineStats *__engineStats;	// 16 = 0x10
    double _superSamplingFactor;	// 24 = 0x18
    struct SCNMatrix4 _screenTransform;	// 32 = 0x20
    long long _sampleCount;	// 96 = 0x60
    _Bool _needSuperSampling;	// 104 = 0x68
    SCNMTLResourceManager *_resourceManager;	// 112 = 0x70
    id <MTLDevice> _device;	// 120 = 0x78
    _Bool _isValidationEnabled;	// 128 = 0x80
    int _profile;	// 132 = 0x84
    unsigned int _features;	// 136 = 0x88
    struct __C3DEngineContext *_engineContext;	// 144 = 0x90
    unsigned int _wantsWideGamut:1;	// 152 = 0x98
    unsigned int _isOpaque:1;	// 152 = 0x98
    unsigned int _disableLinearRendering:1;	// 152 = 0x98
    unsigned int _enableARMode:1;	// 152 = 0x98
    unsigned int _shouldDelegateARCompositing:1;	// 152 = 0x98
    unsigned int _useFunctionConstants:1;	// 152 = 0x98
    unsigned int _reverseZ:1;	// 152 = 0x98
    unsigned int _forceAsyncShaderCompilation:1;	// 152 = 0x98
    id <MTLCommandQueue> _ownedCommandQueue;	// 160 = 0xa0
    NSObject<OS_dispatch_semaphore> *_inFlightSemaphore;	// 168 = 0xa8
    struct atomic<int> _pendingGPUFrameCount;	// 176 = 0xb0
    id <MTLTexture> _textureTarget;	// 184 = 0xb8
    CAMetalLayer *_layerTarget;	// 192 = 0xc0
    id <CAMetalDrawable> _drawable;	// 200 = 0xc8
    float _targetedFrameInterval;	// 208 = 0xd0
    _Bool _shouldPresentAfterMinimumDuration;	// 212 = 0xd4
    _Bool _shouldPresentWithTransaction;	// 213 = 0xd5
    MTLRenderPassDescriptor *_currentRenderPassDescriptor;	// 216 = 0xd8
    MTLRenderPassDescriptor *_originalRenderPassDescriptor;	// 224 = 0xe0
    MISSING_TYPE *_renderSize;	// 232 = 0xe8
    id <MTLCommandBuffer> _currentCommandBuffer;	// 240 = 0xf0
    struct SCNMTLRenderCommandEncoder *_renderEncoder;	// 248 = 0xf8
    id <MTLCommandBuffer> _resourceCommandBuffer;	// 256 = 0x100
    struct SCNMTLBlitCommandEncoder _resourceBlitEncoder;	// 264 = 0x108
    struct SCNMTLComputeCommandEncoder _resourceComputeEncoder;	// 280 = 0x118
    struct {
        unsigned char renderSliceIndex;
        unsigned char eyeCount;
        unsigned char renderMode;
        unsigned char multiVertexOutputStreamGenerator;
        _Bool isMainPass;
        _Bool isFinalTechnique;
    } _renderPassParameters;	// 1992 = 0x7c8
    CDStruct_21854d8c _currentStreamBufferIndices;	// 1998 = 0x7ce
    struct SCNMTLBufferPool *_volatileBufferPools[3];	// 2000 = 0x7d0
    void *_frameVolatileBufferPool;	// 2024 = 0x7e8
    NSMutableArray *_volatileMeshes;	// 2032 = 0x7f0
    NSMutableArray *_bufferPool;	// 2040 = 0x7f8
    NSMutableArray *_usedVolatileMeshElements;	// 2048 = 0x800
    NSMutableArray *_freeVolatileMeshElements;	// 2056 = 0x808
    struct SCNMTLBufferPool *_constantBufferPools[3];	// 2064 = 0x810
    void *_frameConstantBufferPool;	// 2088 = 0x828
    void *_frameTexturePool;	// 2096 = 0x830
    id <MTLDepthStencilState> _defaultDepthStencilState;	// 2104 = 0x838
    id <MTLSamplerState> _defaultSamplerState;	// 2112 = 0x840
    struct __C3DFXMetalProgram *_background2DProgram[3];	// 2120 = 0x848
    struct __C3DFXMetalProgram *_backgroundCubeProgram[3];	// 2144 = 0x860
    struct __C3DFXMetalProgram *_backgroundVideoProgram;	// 2168 = 0x878
    struct __C3DFXMetalProgram *_backgroundVideoAlpha0Program;	// 2176 = 0x880
    struct __C3DRasterizerStates *_backgroundRasterizerStates;	// 2184 = 0x888
    double _initialTime;	// 2192 = 0x890
    NSObject<OS_dispatch_queue> *_resourceQueue;	// 2200 = 0x898
    NSObject<OS_dispatch_group> *_resourceGroup;	// 2208 = 0x8a0
    id <MTLBuffer> _shadowKernelBuffer;	// 2216 = 0x8a8
    struct {
        struct __C3DFXPassInstance *passInstance;
        struct __C3DLightingSystem *lightingSystem;
        struct __C3DDynamicBatchingSystem *dynamicBatchingSystem;
        struct __C3DFXPass *pass;
        void *renderGraphPass;
        _Bool passRequiresLighting;
        struct __C3DTransformTree *transformTree;
    } _processingContext;	// 2224 = 0x8b0
    unsigned int _seed;	// 2280 = 0x8e8
    struct SCNSceneBuffer _frameUniforms[6];	// 2288 = 0x8f0
    CDStruct_deec94a8 _sceneUniforms;	// 6512 = 0x1970
    struct {
        id <MTLBuffer> buffer;
        unsigned long long offset;
        unsigned long long size;
        id <MTLTexture> shadowMaps[256];
        id <MTLTexture> textureMaps[256];
        id <MTLSamplerState> samplerStates[256];
    } _lightsData;	// 6528 = 0x1980
    struct {
        struct float4x4 modelTransform;
        struct float4x4 lastFrameModelTransform;
        struct float4x4 normalTransforms[6];
        struct float4x4 modelViewTransforms[6];
        struct float4x4 modelViewProjectionTransforms[6];
        struct float2x3 boundingBox;
        struct float2x3 worldBoundingBox;
        struct __C3DNode *instanceNode;
        unsigned int flags;
        unsigned int *probeCacheIndex;
    } _nodeUniforms;	// 12704 = 0x31a0
    struct {
        CDStruct_c6b9131d currentLightingSet;
        id <MTLTexture> currentShadowMaps[8];
        id <MTLTexture> currentGoboMaps[8];
        struct unordered_map<unsigned long long, SCNMTLLightSetData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, SCNMTLLightSetData>>> frameLightingSetDatas;
        unsigned long long currentLightingHashKey;
        struct {
            long long count;
            struct __C3DLight *lights[8];
            struct __C3DLightRuntimeData *lightsData[8];
        } currentLightingDesc;
        CDStruct_14d5dc5e currentLightingSpace;
        CDStruct_14d5dc5e currentLightingSpaceShadow;
        _Bool needLightingSpaceTransformation;
        struct SCNMTLClusterSystem clusterSystem;
        struct Info clusterInfo;
        id <MTLTexture> reflectionProbesTextureArray;
    } _lighting;	// 14080 = 0x3700
    struct Cache {
        struct __C3DRasterizerStates *rasterizerStates;
        struct __C3DMesh *mesh;
        SCNMTLMesh *metalMesh;
        struct __C3DMeshElement *meshElement;
        SCNMTLMeshElement *metalMeshElement;
        struct __C3DFXMetalProgram *program;
        struct __C3DMaterial *material;
        struct __C3DGeometry *geometry;
        SCNMTLShadable *metalShadable;
        struct __C3DEffectCommonProfile *commonProfile;
        struct __C3DBlendStates *blendStates;
        unsigned char colorBufferWriteMask;
        struct __C3DNode *node;
        unsigned long long vertexDescriptorHash;
        unsigned char tessellationPipelineStateHash;
        SCNMTLRenderPipeline *renderPipeline;
    } _cache;	// 15168 = 0x3b40
    struct {
        unsigned long long hash;
        SCNMTLRenderPipeline *pipeline;
    } _compositeRendering[2];	// 15296 = 0x3bc0
    SCNMTLRenderPipeline *_downSamplePipeline;	// 15328 = 0x3be0
    struct {
        id <MTLTexture> backgroundTexture;
        id <MTLTexture> overlayTexture;
        id <MTLTexture> stencilDepthTexture;
    } _skCompositing;	// 15336 = 0x3be8
    struct {
        unsigned long long pixelFormat;
        unsigned long long sampleCount;
        SCNMTLRenderPipeline *displayCubemapPipeline;
        SCNMTLRenderPipeline *displayTexture2DPipeline;
        SCNMTLRenderPipeline *displayDepth2DPipeline;
        SCNMTLRenderPipeline *displayDepthCubePipeline;
    } _debug;	// 15360 = 0x3c00
    _Bool _showsAuthoringEnvironment;	// 15408 = 0x3c30
    struct {
        _Bool collectEnabled;
        NSMutableDictionary *errors;
    } _compilationIssues;	// 15416 = 0x3c38
    struct {
        unsigned int modelTransformBindingCount;
        unsigned int modelViewTransformBindingCount;
        unsigned int normalTransformBindingCount;
        unsigned int nodeOpacityBindingCount;
    } _counters;	// 15432 = 0x3c48
    struct {
        unsigned long long passHash;
        struct __C3DMaterial *material;
    } _renderGraph;	// 15448 = 0x3c58
    id <SCNMTLRenderContextResourceManagerMonitor> _resourceManagerMonitor;	// 15464 = 0x3c68
    id <SCNMTLRenderContextCommandBufferStatusMonitor> _commandBufferStatusMonitor;	// 15472 = 0x3c70
    id _commandBufferScheduledHandlers;	// 15480 = 0x3c78
    id _commandBufferCompletedHandlers;	// 15488 = 0x3c80
    id _drawablePresentedHandlers;	// 15496 = 0x3c88
    MTLRenderPassDescriptor *_clientRenderPassDescriptor;	// 15504 = 0x3c90
    id <MTLRenderCommandEncoder> _clientRenderCommandEncoder;	// 15512 = 0x3c98
    id <MTLCommandBuffer> _clientCommandBuffer;	// 15520 = 0x3ca0
    unsigned long long _debugOptions;	// 15528 = 0x3ca8
    double _contentScaleFactor;	// 15536 = 0x3cb0
    id <MTLCommandQueue> _clientCommandQueue;	// 15544 = 0x3cb8
    NSString *_generatedTexturePath;	// 15552 = 0x3cc0
}

- (id).cxx_construct;	// IMP=0x00000000000d744d
- (void).cxx_destruct;	// IMP=0x00000000000d740b
- (void)writeBytes:(const void *)arg1 length:(unsigned long long)arg2;	// IMP=0x00000000000d6e10
- (void)_drawShadowMaps;	// IMP=0x00000000000d5e31
- (void)_drawPBRTextures;	// IMP=0x00000000000d545b
- (void)resetVolatileMeshElements;	// IMP=0x00000000000d5137
- (void)_recycleMTLBufferToPool:(id)arg1;	// IMP=0x00000000000d4e5d
- (id)_newMTLBufferFromPoolWithLength:(unsigned long long)arg1;	// IMP=0x00000000000d4d96
- (void)resetVolatileMeshes;	// IMP=0x00000000000d4c78
- (void)_executeDrawCommand:(CDStruct_26eb7e6d)arg1;	// IMP=0x00000000000cdb15
- (void)_prepareMaterialTextures:(struct __C3DMaterial *)arg1;	// IMP=0x00000000000cda47
- (float)_zFarForSkyboxRenderingProjectionMatrix:(const union C3DMatrix4x4 *)arg1 defaultZFar:(float)arg2;	// IMP=0x00000000000cad66
- (void)_updateProjectionMatrixForOrthographicSkyboxRenderingIfNeeded:(union C3DMatrix4x4 *)arg1;	// IMP=0x00000000000caaa6
- (void)_logLightingInformation;	// IMP=0x00000000000ca0ca
- (void)_createResourceCommandBufferIfNeeded;	// IMP=0x00000000000c99e0
- (void)_clearUnusedBindingPoints;	// IMP=0x00000000000c8a9a
- (void)dealloc;	// IMP=0x00000000000c834b
- (void)_reduceStatsOfConstantBuffer:(id)arg1;	// IMP=0x00000000000c7d9c
- (void)viewports:(const void **)arg1:(long long *)arg2;	// IMP=0x000000000005883b
- (_Bool)constantOffsetAndSize:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;	// IMP=0x0000000000058809
- (const char *)constantData:(int)arg1;	// IMP=0x00000000000587d7
- (id)sampler:(int)arg1:(id)arg2;	// IMP=0x00000000000587a5
- (id)buffer:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;	// IMP=0x0000000000058773
- (id)texture:(int)arg1:(id)arg2;	// IMP=0x0000000000058741
- (unsigned long long)colorPixelFormatAtIndex:(long long)arg1;	// IMP=0x00000000000588b2
- (unsigned long long)depthStencilPixelFormat;	// IMP=0x0000000000058873
- (_Bool)vrrEnabled;	// IMP=0x000000000005886b

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

