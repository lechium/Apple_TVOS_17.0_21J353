//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

__attribute__((visibility("hidden")))
@interface SNCollectionUtils : NSObject
{
}

+ (id)generateArrayWithRangeFrom:(long long)arg1 step:(long long)arg2 count:(long long)arg3;	// IMP=0x006000000005e01a
+ (id)zipPairsToArrayInCollection:(id)arg1 zip:(CDUnknownBlockType)arg2;	// IMP=0x006000000005df77
+ (id)toArrayKeepAllButFirstInCollection:(id)arg1;	// IMP=0x006000000005df14
+ (id)toArrayKeepAllButLastInCollection:(id)arg1;	// IMP=0x006000000005de5d
+ (id)lastItemsFromArraysInCollection:(id)arg1;	// IMP=0x006000000005dd3b
+ (long long)comparisonResultFromInt32:(int)arg1;	// IMP=0x006000000005dc6e
+ (id)shapeCollection:(id)arg1 shape:(id)arg2 error:(id *)arg3;	// IMP=0x006000000005dbc6
+ (_Bool)validateSetEqualityBetweenCollection:(id)arg1 expected:(id)arg2 error:(id *)arg3;	// IMP=0x006000000005d9c1
+ (_Bool)checkSetEqualityBetweenCollection:(id)arg1 expected:(id)arg2;	// IMP=0x006000000005d82c
+ (id)setFromCollection:(id)arg1;	// IMP=0x006000000005d6cd
+ (id)arrayFromCollection:(id)arg1;	// IMP=0x006000000005d617
+ (id)setArrayFromCollection:(id)arg1;	// IMP=0x006000000005d5fc
+ (id)partitionToArraysFromCollection:(id)arg1 memberCountPerPartition:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x006000000005d53e
+ (id)partitionToArraysFromCollection:(id)arg1 memberCountPerPartition:(unsigned long long)arg2;	// IMP=0x006000000005d2bb
+ (id)objectsFromArray:(id)arg1 atIndices:(id)arg2 error:(id *)arg3;	// IMP=0x006000000005cfdc
+ (id)requiredObjectAtIndexNumber:(id)arg1 inArray:(id)arg2 error:(id *)arg3;	// IMP=0x006000000005cf0b
+ (id)optionalObjectAtIndexNumber:(id)arg1 inArray:(id)arg2 error:(id *)arg3;	// IMP=0x006000000005cd1c
+ (id)maxNumberInCollection:(id)arg1;	// IMP=0x006000000005cc17
+ (id)maxInCollection:(id)arg1 compare:(CDUnknownBlockType)arg2;	// IMP=0x006000000005ca3c
+ (CDUnknownBlockType)iteratorForCollection:(id)arg1;	// IMP=0x006000000005c984
+ (id)reverseDictionary:(id)arg1 error:(id *)arg2;	// IMP=0x006000000005c7ec
+ (id)groupIntoArraysFromCollection:(id)arg1 usingKeyGenerator:(CDUnknownBlockType)arg2;	// IMP=0x006000000005c5b0
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 zip:(CDUnknownBlockType)arg3;	// IMP=0x006000000005c23e
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 keyedZip:(CDUnknownBlockType)arg3;	// IMP=0x006000000005c1a1
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 zip:(CDUnknownBlockType)arg3 error:(id *)arg4;	// IMP=0x006000000005c0a5
+ (id)zipValuesFromFirstDictionary:(id)arg1 secondDictionary:(id)arg2 keyedZip:(CDUnknownBlockType)arg3 error:(id *)arg4;	// IMP=0x006000000005c02a
+ (id)zipToArrayFromFirstCollection:(id)arg1 secondCollection:(id)arg2 zip:(CDUnknownBlockType)arg3;	// IMP=0x006000000005b207
+ (id)zipToArrayFromFirstCollection:(id)arg1 secondCollection:(id)arg2 zip:(CDUnknownBlockType)arg3 error:(id *)arg4;	// IMP=0x006000000005b133
+ (id)concatenateDictionaries:(id)arg1 error:(id *)arg2;	// IMP=0x006000000005a5b4
+ (id)toSetConcatenateCollections:(id)arg1;	// IMP=0x006000000005a5a3
+ (id)toArrayConcatenateCollections:(id)arg1;	// IMP=0x006000000005a592
+ (id)toSetArrayConcatenateCollections:(id)arg1;	// IMP=0x006000000005a581
+ (id)mapcatToDictionaryFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x006000000005a4b9
+ (id)mapcatToDictionaryFromCollection:(id)arg1 fallableTransform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x006000000005a440
+ (id)mapcatToSetFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x0060000000059e83
+ (id)mapcatToSetFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000059da4
+ (id)mapcatToArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x0060000000059bcf
+ (id)mapcatToArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000059baa
+ (void)applyToEachInCollection:(id)arg1 apply:(CDUnknownBlockType)arg2;	// IMP=0x0060000000059a5e
+ (_Bool)applyToEachInCollection:(id)arg1 apply:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000059950
+ (id)mapToSetFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x0060000000059616
+ (id)mapToSetFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000059576
+ (id)mapToArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x0060000000059414
+ (id)mapToArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000059403
+ (id)mapToSetArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x006000000005938d
+ (id)mapToSetArrayFromCollection:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x006000000005930c
+ (id)uniqueMatchInCollection:(id)arg1 satisfyingPredicate:(CDUnknownBlockType)arg2;	// IMP=0x0060000000058d68
+ (id)firstInCollection:(id)arg1 satisfyingPredicate:(CDUnknownBlockType)arg2;	// IMP=0x0060000000058cd6
+ (_Bool)allInCollection:(id)arg1 satisfyPredicate:(CDUnknownBlockType)arg2;	// IMP=0x0060000000058c4c
+ (_Bool)anyInCollection:(id)arg1 satisfyPredicate:(CDUnknownBlockType)arg2;	// IMP=0x0060000000058b32
+ (id)reduceCollection:(id)arg1 from:(id)arg2 reducer:(CDUnknownBlockType)arg3;	// IMP=0x0060000000058a75
+ (id)reduceCollection:(id)arg1 from:(id)arg2 reducer:(CDUnknownBlockType)arg3 error:(id *)arg4;	// IMP=0x00600000000589a1
+ (id)filterToSetFromCollection:(id)arg1 removingObjects:(id)arg2;	// IMP=0x0060000000058288
+ (id)filterToArrayFromCollection:(id)arg1 removingObjects:(id)arg2;	// IMP=0x0060000000058216
+ (id)filterToSetFromCollection:(id)arg1 predicate:(CDUnknownBlockType)arg2;	// IMP=0x006000000005814d
+ (id)filterToArrayFromCollection:(id)arg1 predicate:(CDUnknownBlockType)arg2;	// IMP=0x006000000005803d
+ (id)filterKeyValuePairsInDictionary:(id)arg1 removingKeys:(id)arg2;	// IMP=0x0060000000057fb6
+ (id)filterKeyValuePairsInDictionary:(id)arg1 keepingKeys:(id)arg2;	// IMP=0x0060000000057f7f
+ (id)filterKeyValuePairsInDictionary:(id)arg1 withKeyValuePredicate:(CDUnknownBlockType)arg2;	// IMP=0x0060000000057eec
+ (void)applyToEachKeyValuePairInDictionary:(id)arg1 apply:(CDUnknownBlockType)arg2;	// IMP=0x0060000000057833
+ (_Bool)applyToEachKeyValuePairInDictionary:(id)arg1 apply:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000057788
+ (id)mapKeysInDictionary:(id)arg1 keyMappings:(id)arg2 error:(id *)arg3;	// IMP=0x0060000000057083
+ (id)mapKeysInDictionary:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000056de9
+ (id)mapKeysInDictionary:(id)arg1 fallableTransform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000056ce6
+ (id)mapKeysInDictionary:(id)arg1 pairTransform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000056cd5
+ (id)mapKeysInDictionary:(id)arg1 fallablePairTransform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x0060000000056ba9
+ (id)mapValuesInDictionary:(id)arg1 transform:(CDUnknownBlockType)arg2;	// IMP=0x006000000005555c
+ (id)mapValuesInDictionary:(id)arg1 transform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x006000000005554b
+ (id)mapValuesInDictionary:(id)arg1 pairTransform:(CDUnknownBlockType)arg2;	// IMP=0x00600000000554d3
+ (id)mapValuesInDictionary:(id)arg1 pairTransform:(CDUnknownBlockType)arg2 error:(id *)arg3;	// IMP=0x00600000000554c2
+ (id)subtractSetArray:(id)arg1 fromSetArray:(id)arg2;	// IMP=0x00600000000548e5
- (void).cxx_destruct;	// IMP=0x000000000005e0a6
- (id)init;	// IMP=0x000000000005e062

@end

