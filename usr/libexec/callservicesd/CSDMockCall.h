//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CXCallSource, NSArray, NSDate, NSDictionary, NSString, NSUUID, TUCallDisplayContext, TUCallProvider, TUCallScreenShareAttributes, TUHandle;
@protocol CXAudioSessionActivationStateObserver;

@interface CSDMockCall
{
    _Bool _mockPTT;	// 8 = 0x8
    _Bool _mockIsVideo;	// 9 = 0x9
    _Bool _mockIsVideoPaused;	// 10 = 0xa
    _Bool _mockHostedOnCurrentDevice;	// 11 = 0xb
    _Bool _mockEndpointOnCurrentDevice;	// 12 = 0xc
    _Bool _mockScreening;	// 13 = 0xd
    _Bool _mockScreeningAnnouncementHasFinished;	// 14 = 0xe
    _Bool _mockBlocked;	// 15 = 0xf
    _Bool _mockVoicemail;	// 16 = 0x10
    _Bool _mockEmergency;	// 17 = 0x11
    _Bool _mockFailureExpected;	// 18 = 0x12
    _Bool _mockSupportsEmergencyFallback;	// 19 = 0x13
    _Bool _mockSOS;	// 20 = 0x14
    _Bool _mockOutgoing;	// 21 = 0x15
    _Bool _mockConferenced;	// 22 = 0x16
    _Bool _mockUsingBaseband;	// 23 = 0x17
    _Bool _mockSupportsTTYWithVoice;	// 24 = 0x18
    _Bool _mockNeedsManualInCallSounds;	// 25 = 0x19
    _Bool _mockHasStartedOutgoing;	// 26 = 0x1a
    _Bool _mockHasSentInvitation;	// 27 = 0x1b
    _Bool _mockConnecting;	// 28 = 0x1c
    _Bool _mockConnected;	// 29 = 0x1d
    _Bool _mockUplinkMuted;	// 30 = 0x1e
    _Bool _mockUplinkWasExplicitlyMuted;	// 31 = 0x1f
    _Bool _mockMayRequireBreakBeforeMake;	// 32 = 0x20
    _Bool _mockPrefersExclusiveAccessToCellularNetwork;	// 33 = 0x21
    _Bool _mockIsThirdPartyVideo;	// 34 = 0x22
    _Bool _mockShouldSuppressInCallUI;	// 35 = 0x23
    _Bool _mockKnownCaller;	// 36 = 0x24
    _Bool _mockConversation;	// 37 = 0x25
    _Bool _mockSharingScreen;	// 38 = 0x26
    _Bool _mockHasBeenRedirected;	// 39 = 0x27
    _Bool _mockLocalUserInHomeCountry;	// 40 = 0x28
    _Bool _mockRingtoneSuppressedRemotely;	// 41 = 0x29
    _Bool _mockShouldSuppressRingtone;	// 42 = 0x2a
    int _mockService;	// 44 = 0x2c
    int _mockCallStatus;	// 48 = 0x30
    int _mockTTYType;	// 52 = 0x34
    int _mockDisconnectedReason;	// 56 = 0x38
    int _mockSubtype;	// 60 = 0x3c
    int _mockCallRelaySupport;	// 64 = 0x40
    NSString *_mockUniqueProxyIdentifier;	// 72 = 0x48
    double _mockCallDuration;	// 80 = 0x50
    TUHandle *_mockHandle;	// 88 = 0x58
    NSString *_mockLocalizedLabel;	// 96 = 0x60
    NSString *_mockCompanyName;	// 104 = 0x68
    NSString *_mockCallUUID;	// 112 = 0x70
    NSString *_mockCallerNameFromNetwork;	// 120 = 0x78
    long long _mockBytesOfDataUsed;	// 128 = 0x80
    NSString *_mockAudioCategory;	// 136 = 0x88
    NSString *_mockAudioMode;	// 144 = 0x90
    NSUUID *_mockCallGroupUUID;	// 152 = 0x98
    TUCallProvider *_mockProvider;	// 160 = 0xa0
    NSDictionary *_mockProviderContext;	// 168 = 0xa8
    long long _mockProviderErrorCode;	// 176 = 0xb0
    TUCallDisplayContext *_mockDisplayContext;	// 184 = 0xb8
    long long _mockVideoStreamToken;	// 192 = 0xc0
    long long _mockAudioInterruptionProviderType;	// 200 = 0xc8
    NSString *_mockDisplayName;	// 208 = 0xd0
    NSArray *_mockContactIdentifiers;	// 216 = 0xd8
    NSDate *_mockDateCreated;	// 224 = 0xe0
    NSDate *_mockDateConnected;	// 232 = 0xe8
    id <CXAudioSessionActivationStateObserver> _mockAudioInterruptionActivationStateObserver;	// 240 = 0xf0
    CXCallSource *_mockBackingCallSource;	// 248 = 0xf8
    unsigned long long _mockInitialLinkType;	// 256 = 0x100
    long long _mockJunkConfidence;	// 264 = 0x108
    TUCallScreenShareAttributes *_mockScreenShareAttributes;	// 272 = 0x110
    NSUUID *_mockLocalSenderIdentityAccountUUID;	// 280 = 0x118
    CDUnknownBlockType _didPerformUplinkMuted;	// 288 = 0x120
}

+ (id)mockCallWithNotificationCenter:(id)arg1 fromBlock:(CDUnknownBlockType)arg2;	// IMP=0x00400000001a92dd
+ (id)mockCallFromBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000001a9250
+ (id)mockCallWithNotificationCenter:(id)arg1;	// IMP=0x00100000001a923c
+ (id)mockCall;	// IMP=0x00100000001a91d4
- (void).cxx_destruct;	// IMP=0x00200000001aa658
@property(copy, nonatomic) CDUnknownBlockType didPerformUplinkMuted; // @synthesize didPerformUplinkMuted=_didPerformUplinkMuted;
@property(nonatomic, getter=shouldSuppressRingtone) _Bool mockShouldSuppressRingtone; // @synthesize mockShouldSuppressRingtone=_mockShouldSuppressRingtone;
@property(nonatomic, getter=ringtoneSuppressedRemotely) _Bool mockRingtoneSuppressedRemotely; // @synthesize mockRingtoneSuppressedRemotely=_mockRingtoneSuppressedRemotely;
@property(nonatomic, getter=isLocalUserInHomeCountry) _Bool mockLocalUserInHomeCountry; // @synthesize mockLocalUserInHomeCountry=_mockLocalUserInHomeCountry;
@property(copy, nonatomic, getter=localSenderIdentityAccountUUID) NSUUID *mockLocalSenderIdentityAccountUUID; // @synthesize mockLocalSenderIdentityAccountUUID=_mockLocalSenderIdentityAccountUUID;
@property(nonatomic, getter=hasBeenRedirected) _Bool mockHasBeenRedirected; // @synthesize mockHasBeenRedirected=_mockHasBeenRedirected;
@property(retain, nonatomic, getter=screenShareAttributes) TUCallScreenShareAttributes *mockScreenShareAttributes; // @synthesize mockScreenShareAttributes=_mockScreenShareAttributes;
@property(nonatomic, getter=isSharingScreen) _Bool mockSharingScreen; // @synthesize mockSharingScreen=_mockSharingScreen;
@property(nonatomic, getter=isConversation) _Bool mockConversation; // @synthesize mockConversation=_mockConversation;
@property(nonatomic, getter=isKnownCaller) _Bool mockKnownCaller; // @synthesize mockKnownCaller=_mockKnownCaller;
@property(nonatomic, getter=junkConfidence) long long mockJunkConfidence; // @synthesize mockJunkConfidence=_mockJunkConfidence;
@property(nonatomic, getter=shouldSuppressInCallUI) _Bool mockShouldSuppressInCallUI; // @synthesize mockShouldSuppressInCallUI=_mockShouldSuppressInCallUI;
@property(nonatomic, getter=callRelaySupport) int mockCallRelaySupport; // @synthesize mockCallRelaySupport=_mockCallRelaySupport;
@property(nonatomic, getter=initialLinkType) unsigned long long mockInitialLinkType; // @synthesize mockInitialLinkType=_mockInitialLinkType;
@property(nonatomic, getter=isThirdPartyVideo) _Bool mockIsThirdPartyVideo; // @synthesize mockIsThirdPartyVideo=_mockIsThirdPartyVideo;
@property(retain, nonatomic, getter=backingCallSource) CXCallSource *mockBackingCallSource; // @synthesize mockBackingCallSource=_mockBackingCallSource;
@property(retain, nonatomic, getter=audioInterruptionActivationStateObserver) id <CXAudioSessionActivationStateObserver> mockAudioInterruptionActivationStateObserver; // @synthesize mockAudioInterruptionActivationStateObserver=_mockAudioInterruptionActivationStateObserver;
@property(retain, nonatomic, getter=dateConnected) NSDate *mockDateConnected; // @synthesize mockDateConnected=_mockDateConnected;
@property(retain, nonatomic, getter=dateCreated) NSDate *mockDateCreated; // @synthesize mockDateCreated=_mockDateCreated;
@property(copy, nonatomic, getter=contactIdentifiers) NSArray *mockContactIdentifiers; // @synthesize mockContactIdentifiers=_mockContactIdentifiers;
@property(nonatomic, getter=prefersExclusiveAccessToCellularNetwork) _Bool mockPrefersExclusiveAccessToCellularNetwork; // @synthesize mockPrefersExclusiveAccessToCellularNetwork=_mockPrefersExclusiveAccessToCellularNetwork;
@property(copy, nonatomic, getter=displayName) NSString *mockDisplayName; // @synthesize mockDisplayName=_mockDisplayName;
@property(nonatomic, getter=audioInterruptionProviderType) long long mockAudioInterruptionProviderType; // @synthesize mockAudioInterruptionProviderType=_mockAudioInterruptionProviderType;
@property(nonatomic, getter=mayRequireBreakBeforeMake) _Bool mockMayRequireBreakBeforeMake; // @synthesize mockMayRequireBreakBeforeMake=_mockMayRequireBreakBeforeMake;
@property(nonatomic, getter=videoStreamToken) long long mockVideoStreamToken; // @synthesize mockVideoStreamToken=_mockVideoStreamToken;
@property(nonatomic, getter=uplinkWasExplicitlyMuted) _Bool mockUplinkWasExplicitlyMuted; // @synthesize mockUplinkWasExplicitlyMuted=_mockUplinkWasExplicitlyMuted;
@property(nonatomic, getter=isUplinkMuted, setter=setUplinkMuted:) _Bool mockUplinkMuted; // @synthesize mockUplinkMuted=_mockUplinkMuted;
@property(nonatomic, getter=isConnected) _Bool mockConnected; // @synthesize mockConnected=_mockConnected;
@property(nonatomic, getter=isConnecting) _Bool mockConnecting; // @synthesize mockConnecting=_mockConnecting;
@property(nonatomic, getter=hasSentInvitation) _Bool mockHasSentInvitation; // @synthesize mockHasSentInvitation=_mockHasSentInvitation;
@property(nonatomic, getter=hasStartedOutgoing) _Bool mockHasStartedOutgoing; // @synthesize mockHasStartedOutgoing=_mockHasStartedOutgoing;
@property(copy, nonatomic, getter=displayContext) TUCallDisplayContext *mockDisplayContext; // @synthesize mockDisplayContext=_mockDisplayContext;
@property(nonatomic, getter=providerErrorCode) long long mockProviderErrorCode; // @synthesize mockProviderErrorCode=_mockProviderErrorCode;
@property(copy, nonatomic, getter=providerContext) NSDictionary *mockProviderContext; // @synthesize mockProviderContext=_mockProviderContext;
@property(copy, nonatomic, getter=provider) TUCallProvider *mockProvider; // @synthesize mockProvider=_mockProvider;
@property(copy, nonatomic, getter=callGroupUUID) NSUUID *mockCallGroupUUID; // @synthesize mockCallGroupUUID=_mockCallGroupUUID;
@property(copy, nonatomic, getter=audioMode) NSString *mockAudioMode; // @synthesize mockAudioMode=_mockAudioMode;
@property(copy, nonatomic, getter=audioCategory) NSString *mockAudioCategory; // @synthesize mockAudioCategory=_mockAudioCategory;
@property(nonatomic, getter=needsManualInCallSounds) _Bool mockNeedsManualInCallSounds; // @synthesize mockNeedsManualInCallSounds=_mockNeedsManualInCallSounds;
@property(nonatomic, getter=subtype) int mockSubtype; // @synthesize mockSubtype=_mockSubtype;
@property(nonatomic, getter=bytesOfDataUsed) long long mockBytesOfDataUsed; // @synthesize mockBytesOfDataUsed=_mockBytesOfDataUsed;
@property(copy, nonatomic, getter=callerNameFromNetwork) NSString *mockCallerNameFromNetwork; // @synthesize mockCallerNameFromNetwork=_mockCallerNameFromNetwork;
@property(copy, nonatomic, getter=callUUID) NSString *mockCallUUID; // @synthesize mockCallUUID=_mockCallUUID;
@property(copy, nonatomic, getter=companyName) NSString *mockCompanyName; // @synthesize mockCompanyName=_mockCompanyName;
@property(copy, nonatomic, getter=localizedLabel) NSString *mockLocalizedLabel; // @synthesize mockLocalizedLabel=_mockLocalizedLabel;
@property(retain, nonatomic, getter=handle) TUHandle *mockHandle; // @synthesize mockHandle=_mockHandle;
- (void);	// IMP=0x00100000001aa053
@property(nonatomic, getter=disconnectedReason) int mockDisconnectedReason; // @synthesize mockDisconnectedReason=_mockDisconnectedReason;
@property(nonatomic, getter=supportsTTYWithVoice) _Bool mockSupportsTTYWithVoice; // @synthesize mockSupportsTTYWithVoice=_mockSupportsTTYWithVoice;
@property(nonatomic, getter=ttyType) int mockTTYType; // @synthesize mockTTYType=_mockTTYType;
@property(nonatomic, getter=isUsingBaseband) _Bool mockUsingBaseband; // @synthesize mockUsingBaseband=_mockUsingBaseband;
@property(nonatomic, getter=isConferenced) _Bool mockConferenced; // @synthesize mockConferenced=_mockConferenced;
@property(nonatomic, getter=isOutgoing) _Bool mockOutgoing; // @synthesize mockOutgoing=_mockOutgoing;
@property(nonatomic, getter=isSOS, setter=setSOS:) _Bool mockSOS; // @synthesize mockSOS=_mockSOS;
@property(nonatomic) _Bool mockSupportsEmergencyFallback; // @synthesize mockSupportsEmergencyFallback=_mockSupportsEmergencyFallback;
@property(nonatomic, getter=isFailureExpected) _Bool mockFailureExpected; // @synthesize mockFailureExpected=_mockFailureExpected;
@property(nonatomic, getter=isEmergency) _Bool mockEmergency; // @synthesize mockEmergency=_mockEmergency;
@property(nonatomic, getter=callDuration) double mockCallDuration; // @synthesize mockCallDuration=_mockCallDuration;
@property(nonatomic, getter=isVoicemail) _Bool mockVoicemail; // @synthesize mockVoicemail=_mockVoicemail;
@property(nonatomic, getter=isBlocked) _Bool mockBlocked; // @synthesize mockBlocked=_mockBlocked;
@property(nonatomic, getter=screeningAnnouncementHasFinished) _Bool mockScreeningAnnouncementHasFinished; // @synthesize mockScreeningAnnouncementHasFinished=_mockScreeningAnnouncementHasFinished;
@property(nonatomic, getter=isScreening) _Bool mockScreening; // @synthesize mockScreening=_mockScreening;
@property(nonatomic, getter=isEndpointOnCurrentDevice) _Bool mockEndpointOnCurrentDevice; // @synthesize mockEndpointOnCurrentDevice=_mockEndpointOnCurrentDevice;
@property(nonatomic, getter=isHostedOnCurrentDevice) _Bool mockHostedOnCurrentDevice; // @synthesize mockHostedOnCurrentDevice=_mockHostedOnCurrentDevice;
@property(nonatomic, getter=isVideoPaused) _Bool mockIsVideoPaused; // @synthesize mockIsVideoPaused=_mockIsVideoPaused;
@property(nonatomic, getter=isVideo) _Bool mockIsVideo; // @synthesize mockIsVideo=_mockIsVideo;
@property(nonatomic, getter=isPTT) _Bool mockPTT; // @synthesize mockPTT=_mockPTT;
@property(copy, nonatomic, getter=uniqueProxyIdentifier) NSString *mockUniqueProxyIdentifier; // @synthesize mockUniqueProxyIdentifier=_mockUniqueProxyIdentifier;
@property(nonatomic, getter=callStatus) int mockCallStatus; // @synthesize mockCallStatus=_mockCallStatus;
@property(nonatomic, getter=service) int mockService; // @synthesize mockService=_mockService;
- (void)setSharingScreen:(_Bool)arg1 attributes:(id)arg2;	// IMP=0x00100000001a9d1f
- (_Bool)isUplinkMutedOnQueue;	// IMP=0x00100000001a9d0d
- (void)disconnectWithReason:(int)arg1;	// IMP=0x00100000001a9cb2
- (void)dialWithRequest:(id)arg1 displayContext:(id)arg2;	// IMP=0x00100000001a9b34
- (void)performUplinkMuted:(_Bool)arg1;	// IMP=0x00100000001a9ab0
- (void)answerWithRequest:(id)arg1;	// IMP=0x00100000001a99df
- (void)unhold;	// IMP=0x00100000001a99c8
- (void)hold;	// IMP=0x00100000001a99b1
- (void)setScreeningAnnouncementHasFinished:(_Bool)arg1;	// IMP=0x00100000001a999f
- (void)setScreening:(_Bool)arg1;	// IMP=0x00100000001a998d
- (void)setEndpointOnCurrentDevice:(_Bool)arg1;	// IMP=0x00100000001a997b
- (void)updateWithCall:(id)arg1;	// IMP=0x00100000001a9447
- (id)initWithUniqueProxyIdentifier:(id)arg1 endpointOnCurrentDevice:(_Bool)arg2 notificationCenter:(id)arg3;	// IMP=0x00100000001a9355

@end

