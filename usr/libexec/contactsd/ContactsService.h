//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CNAccessAuthorization, CNContactStore, CNContactsEnvironment, NSString, NSXPCConnection;
@protocol CNContactsLogger, CNQueryAnalyticsLogger, CNRegulatoryLogger, CNScheduler, CNiOSAddressBookDataMapper, OS_tcc_identity;

@interface ContactsService : NSObject
{
    CNContactStore *_contactStore;	// 8 = 0x8
    id <CNiOSAddressBookDataMapper> _dataMapper;	// 16 = 0x10
    NSXPCConnection *_connection;	// 24 = 0x18
    id <CNScheduler> _workQueue;	// 32 = 0x20
    id <CNContactsLogger> _logger;	// 40 = 0x28
    CNContactsEnvironment *_environment;	// 48 = 0x30
    CNAccessAuthorization *_accessAuthorization;	// 56 = 0x38
    id <CNRegulatoryLogger> _regulatoryLogger;	// 64 = 0x40
    NSObject<OS_tcc_identity> *_assumedIdentity;	// 72 = 0x48
    id <CNQueryAnalyticsLogger> _queryAnalyticsLogger;	// 80 = 0x50
}

+ (Class)dataMapperClassForConnection:(id)arg1;	// IMP=0x002000000000209c
+ (id)managedConfigurationForConnection:(id)arg1;	// IMP=0x0010000000001fdf
- (void).cxx_destruct;	// IMP=0x0020000000007a37
@property(retain, nonatomic) id <CNQueryAnalyticsLogger> queryAnalyticsLogger; // @synthesize queryAnalyticsLogger=_queryAnalyticsLogger;
@property(retain, nonatomic) NSObject<OS_tcc_identity> *assumedIdentity; // @synthesize assumedIdentity=_assumedIdentity;
@property(retain, nonatomic) id <CNRegulatoryLogger> regulatoryLogger; // @synthesize regulatoryLogger=_regulatoryLogger;
@property(readonly, nonatomic) CNAccessAuthorization *accessAuthorization; // @synthesize accessAuthorization=_accessAuthorization;
@property(readonly, nonatomic) CNContactsEnvironment *environment; // @synthesize environment=_environment;
@property(readonly, nonatomic) id <CNContactsLogger> logger; // @synthesize logger=_logger;
@property(readonly, nonatomic) id <CNScheduler> workQueue; // @synthesize workQueue=_workQueue;
@property(readonly, nonatomic) __weak NSXPCConnection *connection; // @synthesize connection=_connection;
@property(readonly, nonatomic) id <CNiOSAddressBookDataMapper> dataMapper; // @synthesize dataMapper=_dataMapper;
@property(readonly, nonatomic) CNContactStore *contactStore; // @synthesize contactStore=_contactStore;
- (void)requestExtensionCommand:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007982
- (void)authorizedKeysForContactKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000078de
- (void)verifyIndexWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000007871
- (void)reindexSearchableItemsWithIdentifiers:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007866
- (void)writeFavoritesPropertyListData:(id)arg1 toPath:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000007425
- (void)favoritesEntryDictionariesAtPath:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007120
- (_Bool)shouldNotReportFavoritesError:(id)arg1;	// IMP=0x0010000000006fc7
- (void)reportFavoritesIssue:(id)arg1;	// IMP=0x0010000000006f6d
- (void)currentHistoryAnchorWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000006e22
- (void)currentHistoryTokenWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000006ce3
- (void)executeChangeHistoryClearRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000006a99
- (void)changeHistoryWithFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000006946
- (void)unregisterChangeHistoryClientIdentifier:(id)arg1 forContainerIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000066b0
- (void)registerChangeHistoryClientIdentifier:(id)arg1 forContainerIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x001000000000641a
- (void)userActivityForContact:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000006182
- (void)contactWithUserActivityUserInfo:(id)arg1 keysToFetch:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000005ea3
- (void)setBestMeIfNeededForGivenName:(id)arg1 familyName:(id)arg2 email:(id)arg3 withReply:(CDUnknownBlockType)arg4;	// IMP=0x0010000000005b3e
- (void)setMeContact:(id)arg1 forContainer:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x001000000000585d
- (void)setMeContact:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000567f
- (void)setDefaultAccountIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000005461
- (void)defaultContainerIdentifierWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000005360
- (void)subgroupsOfGroupWithIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000520d
- (void)groupsMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000050ba
- (void)accountsMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004f67
- (void)policyForContainerWithIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004e14
- (void)serverSearchContainersMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004cc1
- (void)containersMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004b6e
- (void)executeSaveRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004927
- (void)meContactIdentifiersWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000004735
- (void)identifierWithReply:(CDUnknownBlockType)arg1;	// IMP=0x001000000000460b
- (void)progressiveContactsForFetchRequest:(id)arg1 progressHandler:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000000422d
- (void)encodedContactsAndCursorForFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003ce1
- (void)contactsForFetchRequest:(id)arg1 withMatchInfoReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000392e
- (void)sectionListOffsetsForSortOrder:(long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003709
- (void)contactCountForFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000344e
- (void)unifiedContactCountWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000003324
- (void)performWorkServicingSPI:(CDUnknownBlockType)arg1 authenticationFailureHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003289
- (void)performServicingRequestWork:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002e55
- (void)performWorkWithContactStore:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002d11
- (void)performAsyncWorkWithDataMapper:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002b87
- (void)performWorkWithDataMapper:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002a6b
- (_Bool)clientAllowedToUseSPI:(id *)arg1;	// IMP=0x0010000000002653
- (void)configureAssumedIdentityWithOptions:(id)arg1;	// IMP=0x001000000000264d
- (id)unitTestBaseURLWithOptions:(id)arg1;	// IMP=0x0010000000002550
- (void)configureUnitTestWithOptions:(id)arg1;	// IMP=0x0010000000002102
- (void)configureServiceWithOptions:(id)arg1;	// IMP=0x00100000000020ad
- (id)initWithDataMapper:(id)arg1 dataMapperConfiguration:(id)arg2 workQueue:(id)arg3 connection:(id)arg4 accessAuthorization:(id)arg5;	// IMP=0x0010000000001d52
- (id)initWithWorkQueue:(id)arg1 connection:(id)arg2;	// IMP=0x0010000000001b65

// Remaining properties
// Error: Property attributes should begin with the type ('T') attribute, property name: debugDescription
// Property attributes: (null)

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

