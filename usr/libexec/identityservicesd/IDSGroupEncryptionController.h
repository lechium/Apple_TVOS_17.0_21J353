//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSRealTimeEncryptionIdentity, IMDispatchTimer, NSMutableArray, NSMutableDictionary, NSString;
@protocol IDSGlobalLinkP2PKeyNegotiatorProvider, OS_dispatch_queue;

@interface IDSGroupEncryptionController : NSObject
{
    id _sessionController;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_realtimeEncryptionQueue;	// 16 = 0x10
    _Bool _isInternal;	// 24 = 0x18
    struct os_unfair_lock_s _lock;	// 28 = 0x1c
    _Bool _shouldBroadcastAllValidMkMs;	// 32 = 0x20
    _Bool _shouldSendMKMOverQR;	// 33 = 0x21
    double _mkmAcknowledgementTimeout;	// 40 = 0x28
    double _preKeyRequestDelayDuration;	// 48 = 0x30
    unsigned int _prekeyExpireDuration;	// 56 = 0x38
    unsigned int _previousPrekeyExpireDuration;	// 60 = 0x3c
    unsigned int _mkmExpireDuration;	// 64 = 0x40
    unsigned int _mkmRollDuration;	// 68 = 0x44
    double _mkmRatchetMaxWaitWindow;	// 72 = 0x48
    id <IDSGlobalLinkP2PKeyNegotiatorProvider> _p2pNegotiatorProvider;	// 80 = 0x50
    NSMutableDictionary *_accountIDs;	// 88 = 0x58
    NSMutableDictionary *_fromURIs;	// 96 = 0x60
    IDSRealTimeEncryptionIdentity *_identityForDevice;	// 104 = 0x68
    IDSRealTimeEncryptionIdentity *_previousIdentityForDevice;	// 112 = 0x70
    NSMutableDictionary *_prekeyAckCountForGroup;	// 120 = 0x78
    NSMutableDictionary *_publicKeyForDevice;	// 128 = 0x80
    NSMutableDictionary *_groupIDToKeyMaterialCache;	// 136 = 0x88
    NSMutableDictionary *_groupIDToStableKeyMaterialCache;	// 144 = 0x90
    NSMutableDictionary *_membersForGroup;	// 152 = 0x98
    NSMutableDictionary *_membersLightweightStatusDict;	// 160 = 0xa0
    NSMutableDictionary *_participantsForGroup;	// 168 = 0xa8
    NSMutableDictionary *_groupIDToTypeToParticipantsPushTokens;	// 176 = 0xb0
    NSMutableDictionary *_participantsInfoForGroup;	// 184 = 0xb8
    NSMutableDictionary *_groupIDToLocalParticipantID;	// 192 = 0xc0
    NSMutableDictionary *_participantsWaitingForKeyMaterials;	// 200 = 0xc8
    NSMutableDictionary *_participantsWaitingForStableKeyMaterials;	// 208 = 0xd0
    NSMutableDictionary *_participantsWaitingForInitialKeyMaterials;	// 216 = 0xd8
    NSMutableDictionary *_endpointSubscriptionForGroup;	// 224 = 0xe0
    NSMutableDictionary *_lastKnownGroupIDToPushTokens;	// 232 = 0xe8
    NSMutableDictionary *_lastKnownAccountIDToPushTokens;	// 240 = 0xf0
    NSMutableDictionary *_pendingMasterKeyMaterials;	// 248 = 0xf8
    NSMutableDictionary *_pendingStableKeyMaterials;	// 256 = 0x100
    NSMutableDictionary *_groupIDToResetKeyMaterialCacheTimer;	// 264 = 0x108
    NSMutableDictionary *_encryptionSequenceNumbers;	// 272 = 0x110
    NSMutableDictionary *_groupIDToMKMExpirationTimer;	// 280 = 0x118
    NSMutableDictionary *_groupIDToMKMExpirationTimerBlock;	// 288 = 0x120
    NSMutableDictionary *_groupIDToMKMRollTimer;	// 296 = 0x128
    NSMutableDictionary *_groupIDToMKMRollTimerBlock;	// 304 = 0x130
    NSMutableDictionary *_groupIDToMKMRecoveryRetryCount;	// 312 = 0x138
    NSMutableDictionary *_groupIDToSKMRecoveryRetryCount;	// 320 = 0x140
    NSMutableDictionary *_groupIDToIsKeyMaterialRecoveryRunning;	// 328 = 0x148
    NSMutableDictionary *_groupIDToIsDeferredPreKeyRequestPending;	// 336 = 0x150
    NSMutableDictionary *_groupIDToInitialKeyMaterialDistributionTimeoutBlock;	// 344 = 0x158
    NSMutableDictionary *_groupIDToLastMemberAddDate;	// 352 = 0x160
    NSMutableArray *_preKeyChangeHandlers;	// 360 = 0x168
    IMDispatchTimer *_endpointUpdateTimer;	// 368 = 0x170
    _Bool _isTestRunning;	// 376 = 0x178
    _Bool _fakeMKMWrapping;	// 377 = 0x179
}

+ (_Bool)isKeyRatchetingEnabledForPlatform;	// IMP=0x002000000031dd92
+ (id)sharedInstance;	// IMP=0x0010000000305d4c
- (void).cxx_destruct;	// IMP=0x0020000000329a27
@property(readonly, nonatomic) IDSRealTimeEncryptionIdentity *previousIdentityForDevice; // @synthesize previousIdentityForDevice=_previousIdentityForDevice;
@property(readonly, nonatomic) IDSRealTimeEncryptionIdentity *identityForDevice; // @synthesize identityForDevice=_identityForDevice;
@property(readonly, nonatomic) NSMutableDictionary *groupIDToKeyMaterialCache; // @synthesize groupIDToKeyMaterialCache=_groupIDToKeyMaterialCache;
@property(readonly, nonatomic) NSMutableDictionary *groupIDToStableKeyMaterialCache; // @synthesize groupIDToStableKeyMaterialCache=_groupIDToStableKeyMaterialCache;
@property(nonatomic) _Bool fakeMKMWrapping; // @synthesize fakeMKMWrapping=_fakeMKMWrapping;
@property(nonatomic) _Bool isTestRunning; // @synthesize isTestRunning=_isTestRunning;
@property(retain, nonatomic) id sessionController; // @synthesize sessionController=_sessionController;
- (void)_sendingKeysToMembers:(id)arg1;	// IMP=0x00100000003299b2
- (id)getLightweightStatusDictForGroup:(id)arg1;	// IMP=0x0010000000329999
- (id)getMembersForGroup:(id)arg1;	// IMP=0x0010000000329980
- (id)getParticipantsInfoForGroup:(id)arg1;	// IMP=0x0010000000329967
- (id)getParticipantsForGroup:(id)arg1 ofType:(long long)arg2;	// IMP=0x00100000003298da
- (id)getParticipantsForGroup:(id)arg1;	// IMP=0x00100000003298c1
- (id)getParticipantsWaitingForInitialKeyMaterials:(id)arg1;	// IMP=0x00100000003298a8
- (id)getParticipantsWaitingForStableKeyMaterials:(id)arg1;	// IMP=0x001000000032988f
- (id)getParticipantsWaitingForKeyMaterials:(id)arg1;	// IMP=0x0010000000329876
- (id)stablekeyMaterialCacheToGroup:(id)arg1;	// IMP=0x001000000032985d
- (id)keyMaterialCacheToGroup:(id)arg1;	// IMP=0x0010000000329844
- (void)account:(id)arg1 didUpdateRegisteredDevices:(id)arg2;	// IMP=0x0010000000329116
- (void)didUpdateParticipants:(id)arg1 ofType:(long long)arg2 forGroup:(id)arg3 sessionID:(id)arg4;	// IMP=0x0010000000329003
- (void)_updateStandardParticipants:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0010000000328052
- (void)_updateLightweightParticipants:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000000327119
- (void)_dispatchDeferredPrekeyRequestForGroupID:(id)arg1 previousParticipantsPushTokens:(id)arg2 currentActiveParticipants:(id)arg3 sessionID:(id)arg4;	// IMP=0x0010000000326e39
- (id)_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup:(id)arg1 waitingParticipants:(id)arg2 addedParticipantsDiff:(id)arg3 currentParticipantsPushTokens:(id)arg4 participantType:(long long)arg5;	// IMP=0x001000000032654d
- (void)_updateAllActiveParticipantsInfoFromParticipants:(id)arg1 standardParticipantsPushTokens:(id)arg2 lightweightParticipantsPushTokens:(id)arg3 groupID:(id)arg4;	// IMP=0x0010000000325d6d
- (void)_dispatchDeferredPrekeyRequestForGroupID:(id)arg1 previousParticipantsPushTokens:(id)arg2 currentActiveParticipants:(id)arg3 sessionID:(id)arg4 waitingParticipantsTokens:(id)arg5;	// IMP=0x00100000003257fb
- (id)allParticipantsInfoForGroup:(id)arg1;	// IMP=0x0010000000325782
- (_Bool)_isValidPushToken:(id)arg1;	// IMP=0x0010000000325737
- (void)_updateRelevantEncryptedDataBlobForSession:(id)arg1;	// IMP=0x0010000000325661
- (void)didUpdateMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 lightweightStatusDict:(id)arg4 hasChangedStandardMembers:(_Bool)arg5 newlyAddedMembers:(id)arg6;	// IMP=0x00100000003251c8
- (void)setMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 lightweightStatusDict:(id)arg4;	// IMP=0x0010000000324700
- (void)updateLightweightMemberTypes:(id)arg1 members:(id)arg2 triggeredLocally:(_Bool)arg3 forGroup:(id)arg4 sessionID:(id)arg5;	// IMP=0x001000000032402a
- (_Bool)_isMemberLightweight:(id)arg1 lightweightStatusDict:(id)arg2;	// IMP=0x0010000000324015
- (_Bool)_isMemberStandard:(id)arg1 lightweightStatusDict:(id)arg2;	// IMP=0x0010000000323fc7
- (void)didReceiveEndpointsUpdate:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x001000000032380c
- (void)rollNewKeysAfterResettingPrekeysForGroups:(id)arg1 withReason:(long long)arg2;	// IMP=0x0010000000323107
- (void)updateServerDesiredKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0010000000321a73
- (id)_compactKeyMaterialMessage:(id)arg1 isOutgoing:(_Bool)arg2 groupID:(id)arg3;	// IMP=0x00100000003213df
- (id)_generateMKMBlobForQRFromMessage:(id)arg1 account:(id)arg2 destination:(id)arg3 fromURI:(id)arg4;	// IMP=0x0010000000320cca
- (void)processedQRMKMPayloadFromData:(id)arg1 forGroupID:(id)arg2 account:(id)arg3 remoteURI:(id)arg4 localURI:(id)arg5 tokens:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;	// IMP=0x0010000000320224
- (void)sendKeyMaterialsToWaitingParticipantsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031fb7d
- (CDStruct_89ddc8e1)participantsReadyForKeyMaterialsForGroup:(id)arg1;	// IMP=0x001000000031f75f
- (void)removeExpiredPrekeys;	// IMP=0x001000000031f63a
- (void)sendPublicKeyToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x001000000031f130
- (void)sendPublicKeyToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031f021
- (void)_sendMessage:(id)arg1 toDestination:(id)arg2 forGroup:(id)arg3 sessionID:(id)arg4 command:(long long)arg5 timeout:(double)arg6 shouldExpire:(_Bool)arg7 useQR:(_Bool)arg8 completion:(CDUnknownBlockType)arg9 completionBlock:(CDUnknownBlockType)arg10;	// IMP=0x001000000031de54
- (double)mkmRatchetMaxWaitWindow;	// IMP=0x001000000031ddaa
- (id)deriveMKI:(id)arg1 withInfo:(id)arg2;	// IMP=0x001000000031dc5c
- (id)deriveMKS:(id)arg1 withInfo:(id)arg2;	// IMP=0x001000000031dbe3
- (id)deriveMKM:(id)arg1 withInfo:(id)arg2;	// IMP=0x001000000031db6a
- (id)deriveKeyMaterial:(id)arg1 withInfo:(id)arg2;	// IMP=0x001000000031d8b3
- (void)_alreadyLocked_sendRatchetedKeyMaterials:(id)arg1 toAVC:(id)arg2;	// IMP=0x001000000031d65c
- (_Bool)_alreadyLocked_shouldRatchetForGroup:(id)arg1;	// IMP=0x001000000031d467
- (void)ratchetAndSendKeyMaterialsToAVCForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031cb9d
- (void)reportTimeDifferenceBetweenFirstPacketAndMKI:(long long)arg1 forMKI:(id)arg2 service:(id)arg3 activeParticipants:(long long)arg4;	// IMP=0x001000000031ca52
- (void)unsubscribeEndpointsForGroup:(id)arg1;	// IMP=0x001000000031c8dc
- (void)resetKeysForGroup:(id)arg1 shouldRemoveCurrentParticipants:(_Bool)arg2;	// IMP=0x001000000031c53f
- (void)removeActiveParticipant:(id)arg1 forGroup:(id)arg2;	// IMP=0x001000000031bd95
- (void)removeLocalActiveParticipantForGroup:(id)arg1;	// IMP=0x001000000031bd2a
- (id)activeParticipantsForGroup:(id)arg1;	// IMP=0x001000000031bc90
- (void)resetDevicePrekey;	// IMP=0x001000000031bbf3
- (_Bool)_shouldEnforceRemoteTimeout;	// IMP=0x001000000031bab1
- (double)_multiwayFTMessageSendTimeout;	// IMP=0x001000000031b965
- (void)sendKeyMaterialsToLocal:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031b690
- (void)_sendKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg4 requireMKM:(_Bool)arg5 requireSKM:(_Bool)arg6;	// IMP=0x0010000000319252
- (id)destinationsExcludingSelfForDestinations:(id)arg1;	// IMP=0x0010000000318fac
- (void)resetKeyMaterialLocalSentStatus:(id)arg1;	// IMP=0x0010000000318f46
- (void)resetSKMLocalSentStatus:(id)arg1;	// IMP=0x0010000000318c7d
- (void)resetMKMLocalSentStatus:(id)arg1;	// IMP=0x00100000003189ab
- (id)_protectedCachedKeyMaterialsForDestination:(id)arg1 pushToken:(id)arg2 forGroup:(id)arg3 outURIs:(id *)arg4 includePeers:(_Bool)arg5;	// IMP=0x0010000000318783
- (void)sendPendingKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 forDevice:(id)arg3 fromURI:(id)arg4;	// IMP=0x00100000003184d9
- (id)stableKeyMaterialForGroup:(id)arg1;	// IMP=0x001000000031835e
- (id)masterKeyMaterialForGroup:(id)arg1;	// IMP=0x00100000003181e3
- (void)notifyStableKeyMaterialsReceivedForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0010000000317d6e
- (void)receivedGroupStableKeyMaterial:(id)arg1 fromPushToken:(id)arg2 sessionID:(id)arg3 groupID:(id)arg4;	// IMP=0x0010000000317a27
- (void)noteReceivedGroupMasterKeyMaterials:(id)arg1 URIs:(id)arg2 sessionID:(id)arg3;	// IMP=0x001000000031775e
- (void)requestPendingKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031746b
- (id)receivedAndSetKeyMaterial:(id)arg1 stableKeyMaterial:(id)arg2 forDevice:(id)arg3 fromURI:(id)arg4 groupID:(id)arg5 sessionID:(id)arg6 fromSender:(_Bool)arg7 error:(id *)arg8 forMKM:(_Bool)arg9 forSKM:(_Bool)arg10;	// IMP=0x0010000000315f01
- (_Bool)_storePendingKeyMaterial:(id)arg1 stableKeyMaterial:(id)arg2 hasValidMKM:(_Bool)arg3 hasValidSKM:(_Bool)arg4 forDevice:(id)arg5;	// IMP=0x0010000000315ae0
- (void)processIncomingKeyMaterialsRecoveryRequest:(id)arg1 fromDevice:(id)arg2 fromURI:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 requireMKM:(_Bool)arg7 requireSKM:(_Bool)arg8;	// IMP=0x0010000000315285
- (void)sendKeyMaterialsRecoveryRequestToParticipants:(id)arg1 groupID:(id)arg2 sessionID:(id)arg3 requireMKM:(_Bool)arg4 requireSKM:(_Bool)arg5;	// IMP=0x0010000000314b89
- (void)sendKeyMaterialsRecoveryRequestToGroup:(id)arg1 requireMKM:(_Bool)arg2 requireSKM:(_Bool)arg3;	// IMP=0x0010000000314473
- (void)sendKeyMaterialsRecoveryRequestToDevice:(id)arg1 fromURI:(id)arg2 participantID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 requireMKM:(_Bool)arg6 requireSKM:(_Bool)arg7;	// IMP=0x0010000000313ba5
- (void)sendKeyMaterialsRecoveryRequestToDevice:(id)arg1 fromURI:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4 requireMKM:(_Bool)arg5 requireSKM:(_Bool)arg6;	// IMP=0x0010000000313b6b
- (void)createStableKeyMaterialAndSendToFrameworkForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0010000000313980
- (id)createStableKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031360b
- (void)createKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000031296f
- (unsigned long long)localParticipantIDForGroupID:(id)arg1;	// IMP=0x0010000000312939
- (long long)setLocalParticipantID:(unsigned long long)arg1 forGroupID:(id)arg2;	// IMP=0x00100000003125d3
- (void)_mkmRollTimerFiredForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000003120e4
- (void)_stopMkmExpirationTimerForGroup:(id)arg1;	// IMP=0x0010000000311f62
- (void)_startMkmExpirationTimer:(int)arg1 forGroupID:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000311c45
- (void)_handleMkmExpirationTimerForGroup:(id)arg1;	// IMP=0x0010000000311b05
- (void)_stopMkmRollTimerForGroup:(id)arg1;	// IMP=0x001000000031198e
- (void)_startMkmRollTimer:(int)arg1 forGroupID:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000311684
- (void)_handleMkmRollTimerForGroup:(id)arg1;	// IMP=0x0010000000311530
- (void)cleanUpExpiredMasterKeyMaterial;	// IMP=0x0010000000310713
- (id)participantIDsForURIs:(id)arg1 group:(id)arg2;	// IMP=0x0010000000310320
- (id)participantInfoByURIForGroup:(id)arg1;	// IMP=0x001000000030ffd2
- (void)sendPrekeyRequestToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x001000000030fbfe
- (void)sendPrekeyRequestToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x001000000030fb15
- (id)publicKeys;	// IMP=0x001000000030f86b
- (long long)realTimeEncryptionPublicWrapModeForDevice:(id)arg1;	// IMP=0x001000000030f700
- (id)realTimeEncryptionPublicKeyDataForDevice:(id)arg1;	// IMP=0x001000000030f593
- (id)realTimeEncryptionPublicKeyForDevice:(id)arg1;	// IMP=0x001000000030f435
- (void)_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:(id)arg1 remoteToken:(id)arg2 previousRemotePublicKey:(id)arg3 newRemotePublicKey:(id)arg4;	// IMP=0x001000000030f169
- (_Bool)setRealTimeEncryptionPublicKey:(id)arg1 forDevice:(id)arg2 fromURI:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 wrapMode:(long long)arg7;	// IMP=0x001000000030e7db
- (unsigned long long)encryptionSequenceNumberForGroupID:(id)arg1;	// IMP=0x001000000030e6d6
- (void)storeEncryptionSequenceNumber:(unsigned long long)arg1 groupID:(id)arg2;	// IMP=0x001000000030e505
- (void)resetKeyMaterialCacheTimerIfNeeded:(id)arg1;	// IMP=0x001000000030e284
- (void)resetMKMCacheAfterTimeoutForGroup:(id)arg1 interval:(unsigned long long)arg2;	// IMP=0x001000000030de87
- (void)_resetKeyCacheForGroup:(id)arg1;	// IMP=0x001000000030dd6e
- (void)reportPrekeyAckStatus:(id)arg1;	// IMP=0x001000000030dc6c
- (void)processIncomingPrekeyAckForGroup:(id)arg1;	// IMP=0x001000000030db08
- (id)realTimeEncryptionPublicKeyData;	// IMP=0x001000000030d73b
- (long long)realTimeEncryptionPublicKeyWrappingMode;	// IMP=0x001000000030d718
- (id)createRealTimeEncryptionFullIdentityForDevice:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000030cd06
- (void)_startKeyRecoveryForMKM:(_Bool)arg1 forSKM:(_Bool)arg2 forDevice:(id)arg3 forGroupID:(id)arg4;	// IMP=0x001000000030cb8b
- (void)_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:(_Bool)arg1 forSKM:(_Bool)arg2 forDevice:(id)arg3 forGroupID:(id)arg4;	// IMP=0x001000000030bf09
- (void)_sendKeyRecoveryRequestForPendingKeys:(id)arg1 requireMKM:(_Bool)arg2 requireSKM:(_Bool)arg3 forDevice:(id)arg4;	// IMP=0x001000000030b601
- (void)_dispatchRenewPrekeyTimer;	// IMP=0x001000000030b413
- (void)_sendRenewedPrekeysToGroups;	// IMP=0x001000000030b085
- (void)_noteKeyMaterialNotNeededForDestination:(id)arg1 groupID:(id)arg2;	// IMP=0x001000000030adfa
- (void)_noteKeyMaterialDidSendToDestination:(id)arg1 groupID:(id)arg2 withSuccess:(_Bool)arg3;	// IMP=0x001000000030aa26
- (void)_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:(id)arg1;	// IMP=0x001000000030a42e
- (id)_pruneLightweightParticipantsForGroupID:(id)arg1 forTokens:(id)arg2;	// IMP=0x001000000030a352
- (id)_pruneInvalidAndLocalPushTokensFromTokens:(id)arg1;	// IMP=0x001000000030a2ac
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 requireMKM:(_Bool)arg6 requireSKM:(_Bool)arg7;	// IMP=0x001000000030a26f
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 requireMKM:(_Bool)arg6 requireSKM:(_Bool)arg7 isFirstSession:(_Bool)arg8;	// IMP=0x001000000030a22f
- (id)_getSetofStandardParticipantsForGroup:(id)arg1;	// IMP=0x0010000000309aed
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 shouldGenerateMKM:(_Bool)arg6 requireMKM:(_Bool)arg7 requireSKM:(_Bool)arg8 isFirstSession:(_Bool)arg9;	// IMP=0x0010000000307fa5
- (void)reliablyRequestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0010000000307f7b
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 shouldGenerateMKM:(_Bool)arg3;	// IMP=0x0010000000307f4b
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0010000000307f1b
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 requireMKM:(_Bool)arg4 requireSKM:(_Bool)arg5;	// IMP=0x0010000000307ef0
- (void)removeAccountForGroup:(id)arg1;	// IMP=0x0010000000307c04
- (void)setAccount:(id)arg1 fromURI:(id)arg2 forGroup:(id)arg3;	// IMP=0x00100000003076b3
- (id)_ensureGroupStableKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x001000000030761c
- (id)_locked_ensureGroupMasterKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x0010000000307414
- (_Bool)_isUsingAccount:(id)arg1;	// IMP=0x00100000003072c8
- (id)_localDevicePushToken;	// IMP=0x001000000030723d
- (void)notifyPreKeyChange;	// IMP=0x00100000003070bd
- (CDUnknownBlockType)addPreKeyChangeHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000306f84
- (struct __SecKey *)publicKeyForPushToken:(id)arg1;	// IMP=0x0010000000306f39
- (struct __SecKey *)previousLocalPrivatePreKey;	// IMP=0x0010000000306f23
- (struct __SecKey *)previousLocalPublicPreKey;	// IMP=0x0010000000306f0d
- (struct __SecKey *)localPrivatePreKey;	// IMP=0x0010000000306ef7
- (struct __SecKey *)localPublicPreKey;	// IMP=0x0010000000306ee1
- (id)remotePushTokensForGroup:(id)arg1;	// IMP=0x0010000000306ac4
- (id)localPushToken;	// IMP=0x0010000000306ab2
- (id)p2pNegotiatorProvider;	// IMP=0x0010000000306aa4
- (id)init;	// IMP=0x0010000000305da1

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

