//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CLSubmersionDataCollector, CLSubmersionStateMachine, CLTimer, CLWaterSubmersionMeasurement;

@interface CLContextManagerWaterSubmersionBase
{
    struct unique_ptr<CLPowerAssertion, std::default_delete<CLPowerAssertion>> _powerAssertionSubmersion;	// 40 = 0x28
    CLTimer *_submersionPowerAssertionTimer;	// 48 = 0x30
    struct unique_ptr<CLPowerAssertion, std::default_delete<CLPowerAssertion>> _powerAssertionHK;	// 56 = 0x38
    _Bool _updatingHK;	// 64 = 0x40
    _Bool _updatingSurfacePressure;	// 65 = 0x41
    long long _submersionState;	// 72 = 0x48
    long long _externalSubmersionState;	// 80 = 0x50
    CLSubmersionDataCollector *_hkCollector;	// 88 = 0x58
    CLSubmersionStateMachine *_submersionStateMachine;	// 96 = 0x60
    double _lastHKUpdate;	// 104 = 0x68
    double _lastDefaultLevelLogTimestamp;	// 112 = 0x70
    CLWaterSubmersionMeasurement *_deepestDepthForHK;	// 120 = 0x78
    double _timeBetweenHKUpdates;	// 128 = 0x80
    shared_ptr_85043445 _aopSubmersionState;	// 136 = 0x88
}

- (id).cxx_construct;	// IMP=0x00200000005fe9ec
- (void).cxx_destruct;	// IMP=0x00100000005fe98b
@property(nonatomic) double timeBetweenHKUpdates; // @synthesize timeBetweenHKUpdates=_timeBetweenHKUpdates;
@property(retain, nonatomic) CLWaterSubmersionMeasurement *deepestDepthForHK; // @synthesize deepestDepthForHK=_deepestDepthForHK;
@property(nonatomic) double lastDefaultLevelLogTimestamp; // @synthesize lastDefaultLevelLogTimestamp=_lastDefaultLevelLogTimestamp;
@property(nonatomic) double lastHKUpdate; // @synthesize lastHKUpdate=_lastHKUpdate;
@property(retain, nonatomic) CLSubmersionStateMachine *submersionStateMachine; // @synthesize submersionStateMachine=_submersionStateMachine;
@property(retain, nonatomic) CLSubmersionDataCollector *hkCollector; // @synthesize hkCollector=_hkCollector;
@property(nonatomic) _Bool updatingSurfacePressure; // @synthesize updatingSurfacePressure=_updatingSurfacePressure;
@property(nonatomic) shared_ptr_85043445 aopSubmersionState; // @synthesize aopSubmersionState=_aopSubmersionState;
@property(nonatomic) long long externalSubmersionState; // @synthesize externalSubmersionState=_externalSubmersionState;
@property(nonatomic) _Bool updatingHK; // @synthesize updatingHK=_updatingHK;
@property(nonatomic) long long submersionState; // @synthesize submersionState=_submersionState;
- (void)notificationAcknowledged:(unsigned long long)arg1;	// IMP=0x00100000005fe62d
- (void)startSubmersionPowerAssertion;	// IMP=0x00100000005fe3f7
- (void)retrieveCachedSubmersionState;	// IMP=0x00100000005fdf74
- (void)saveCachedSubmersionState:(shared_ptr_85043445)arg1;	// IMP=0x00100000005fdd70
- (void)onNotSubmerged;	// IMP=0x00100000005fdd24
- (void)onDeepSubmersion:(double)arg1 withStateChanged:(_Bool)arg2;	// IMP=0x00100000005fdcc1
- (void)onShallowSubmersion:(_Bool)arg1;	// IMP=0x00100000005fdc5e
- (void)updateSubmersionStateFromMeasurement:(id)arg1;	// IMP=0x00100000005fd84a
- (void)updateSubmersionStateFromAOPState:(shared_ptr_85043445)arg1;	// IMP=0x00100000005fd3fe
- (void)updateClientsSubmersionState:(id)arg1;	// IMP=0x00100000005fd186
- (void)updateClientsSubmersionMeasurement:(id)arg1;	// IMP=0x00100000005fc87d
- (void)clientConnected:(id)arg1 withNotification:(unsigned long long)arg2;	// IMP=0x00100000005fc5a9
- (void)notifyHKUpdates:(id)arg1;	// IMP=0x00100000005fc53f
- (void)stopHKCollector;	// IMP=0x00100000005fc367
- (void)startHKCollector:(double)arg1;	// IMP=0x00100000005fc116
- (void)dealloc;	// IMP=0x00100000005fc008
- (id)initWithUniverse:(id)arg1 delegate:(id)arg2 withBuffer:(void *)arg3 withSourceAggregator:(id)arg4;	// IMP=0x00100000005fbb00

@end

