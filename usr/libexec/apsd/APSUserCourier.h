//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class APSEnvironment, APSNoOpPowerAssertion, APSOutgoingMessageQueue, APSOutgoingQueue, APSProxyClient, APSPushHistory, APSTTLCollection, APSTokenStore, APSTopicHasher, APSTopicManager, APSWakeMetricTracker, CUTPowerAssertion, CUTWeakReference, MISSING_TYPE, NSArray, NSCountedSet, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, PCPersistentTimer;
@protocol APSClientIdentityProvider, APSDebugOverrides, APSFilterVersionStateMachine, APSProtocolConnection, APSProtocolConnectionEstablisher, APSSystemTokenStorage, APSUser, APSUserAppIDManager, APSUserCourierDelegate;

@interface APSUserCourier : NSObject
{
    id <APSUserCourierDelegate> _delegate;	// 8 = 0x8
    APSEnvironment *_environment;	// 16 = 0x10
    CUTPowerAssertion *_delayedKeepAlivePowerAssertion;	// 24 = 0x18
    NSMutableDictionary *_connectionPortNamesToConnections;	// 32 = 0x20
    APSTopicManager *_topicManager;	// 40 = 0x28
    PCPersistentTimer *_pendingMessageReconnectTimer;	// 48 = 0x30
    PCPersistentTimer *_delayedReconnectTimer;	// 56 = 0x38
    PCPersistentTimer *_delayedSuspendKeepAliveTimer;	// 64 = 0x40
    NSNumber *_serverExpectedKeepAliveInterval;	// 72 = 0x48
    NSData *_lastReceivedPayloadHash;	// 80 = 0x50
    NSString *_lastReceivedTopic;	// 88 = 0x58
    double _lastReceivedTopicTime;	// 96 = 0x60
    NSNumber *_lastReceivedTimestamp;	// 104 = 0x68
    NSDate *_startedOpeningStream;	// 112 = 0x70
    NSDate *_keepAliveSent;	// 120 = 0x78
    NSDate *_timeSinceLastKeepAlive;	// 128 = 0x80
    double _lastKeepAliveFailureTime;	// 136 = 0x88
    APSWakeMetricTracker *_wakeMetricTracker;	// 144 = 0x90
    NSCountedSet *_inhibitedTopics;	// 152 = 0x98
    _Bool _isIdentityAvailable;	// 160 = 0xa0
    NSTimer *_resetInterfacePreferenceTimer;	// 168 = 0xa8
    unsigned long long _forceKeepAliveProxyInterfaceFailureCount;	// 176 = 0xb0
    unsigned long long _obtainKeepAliveProxyFailureCount;	// 184 = 0xb8
    unsigned long long _findKeepAliveProxyInterfaceFailureCount;	// 192 = 0xc0
    _Bool _firstPushSinceWake;	// 200 = 0xc8
    _Bool _preparingForSleep;	// 201 = 0xc9
    _Bool _lastHasConnectionsWithListeningTopics;	// 202 = 0xca
    APSNoOpPowerAssertion *_dataReceivedPowerAssertion;	// 208 = 0xd0
    MISSING_TYPE *_disconnectingStream;	// 216 = 0xd8
    NSTimer *_recreateCourierStateTimer;	// 224 = 0xe0
    APSNoOpPowerAssertion *_recreateCourierStatePowerAssertion;	// 232 = 0xe8
    long long _usersPotentiallyWithMessages;	// 240 = 0xf0
    double _lastUserConnectTime;	// 248 = 0xf8
    long long _successfulConnectionCount;	// 256 = 0x100
    APSNoOpPowerAssertion *_waitForStoredMessagesToArrivePowerAssertion;	// 264 = 0x108
    NSString *_lastReceivedTopicToCauseWake;	// 272 = 0x110
    double _lastReceivedTopicToCauseWakeTime;	// 280 = 0x118
    NSCountedSet *_topicsToCauseWake;	// 288 = 0x120
    NSCountedSet *_offendingTopics;	// 296 = 0x128
    double _startedDarkWake;	// 304 = 0x130
    NSString *_redirectHost;	// 312 = 0x138
    NSMutableDictionary *_proxyClients;	// 320 = 0x140
    APSProxyClient *_proxyClientWithOutstandingPresence;	// 328 = 0x148
    APSPushHistory *_pushHistory;	// 336 = 0x150
    APSTokenStore *_tokenStore;	// 344 = 0x158
    APSTopicHasher *_topicHasher;	// 352 = 0x160
    NSData *_cachedPublicToken;	// 360 = 0x168
    _Bool _shouldUseInternet;	// 368 = 0x170
    _Bool _shouldRun;	// 369 = 0x171
    _Bool _enabled;	// 370 = 0x172
    _Bool _enableCriticalReliability;	// 371 = 0x173
    _Bool _trackActivityPresence;	// 372 = 0x174
    unsigned long long _activityPresenceSalt;	// 376 = 0x178
    NSDate *_lastActivityPresenceSaltRoll;	// 384 = 0x180
    _Bool _isConnectedToService;	// 392 = 0x188
    NSDate *_lastConnectionAttempt;	// 400 = 0x190
    double _lastClientRequestedKeepaliveTime;	// 408 = 0x198
    double _lastLateCriticalOutgoingMessageAcknowledgmentReconnectTime;	// 416 = 0x1a0
    NSString *_latestGeoRegion;	// 424 = 0x1a8
    NSDate *_lastPresence;	// 432 = 0x1b0
    NSData *_certificate;	// 440 = 0x1b8
    NSData *_nonce;	// 448 = 0x1c0
    NSData *_signature;	// 456 = 0x1c8
    APSOutgoingMessageQueue *_outgoingMessageQueue;	// 464 = 0x1d0
    APSOutgoingQueue *_tokenRequestQueue;	// 472 = 0x1d8
    double _slowReceiveThreshold;	// 480 = 0x1e0
    NSMutableSet *_activeTaskServers;	// 488 = 0x1e8
    unsigned long long _nextTaskMessageId;	// 496 = 0x1f0
    CUTWeakReference *_weakSelf;	// 504 = 0x1f8
    APSTTLCollection *_tracingEnabledAcksCollection;	// 512 = 0x200
    double _delayedSuspendKeepAliveInterval;	// 520 = 0x208
    _Bool _pendingPostSuspensionWWANFlush;	// 528 = 0x210
    _Bool _hasFilterChanged;	// 529 = 0x211
    _Bool _locallyDisabledFilterOptimization;	// 530 = 0x212
    _Bool _serverDisabledFilterOptimization;	// 531 = 0x213
    unsigned int _disconnectReason;	// 532 = 0x214
    NSArray *_certificates;	// 536 = 0x218
    NSMutableArray *_connectionServers;	// 544 = 0x220
    NSString *_ifname;	// 552 = 0x228
    NSNumber *_currentMessageID;	// 560 = 0x230
    NSMutableArray *_subscriptionRequests;	// 568 = 0x238
    id <APSClientIdentityProvider> _clientIdentityProvider;	// 576 = 0x240
    id <APSSystemTokenStorage> _systemTokenStorage;	// 584 = 0x248
    id <APSFilterVersionStateMachine> _filterVersionStateMachine;	// 592 = 0x250
    id <APSDebugOverrides> _debugOverrides;	// 600 = 0x258
    NSMutableDictionary *_protocolConnectionByIdentifier;	// 608 = 0x260
    id <APSUser> _courierUser;	// 616 = 0x268
    id <APSUserAppIDManager> _userAppIDManager;	// 624 = 0x270
    NSMutableDictionary *_stateByConnectionIdentifier;	// 632 = 0x278
    id <APSProtocolConnectionEstablisher> _protocolConnectionEstablisher;	// 640 = 0x280
}

- (void).cxx_destruct;	// IMP=0x001000000003e1dc
@property(retain, nonatomic) id <APSProtocolConnectionEstablisher> protocolConnectionEstablisher; // @synthesize protocolConnectionEstablisher=_protocolConnectionEstablisher;
@property(retain, nonatomic) NSMutableDictionary *stateByConnectionIdentifier; // @synthesize stateByConnectionIdentifier=_stateByConnectionIdentifier;
@property(retain, nonatomic) id <APSUserAppIDManager> userAppIDManager; // @synthesize userAppIDManager=_userAppIDManager;
@property(retain, nonatomic) id <APSUser> courierUser; // @synthesize courierUser=_courierUser;
@property(retain, nonatomic) NSMutableDictionary *protocolConnectionByIdentifier; // @synthesize protocolConnectionByIdentifier=_protocolConnectionByIdentifier;
@property(retain, nonatomic) id <APSDebugOverrides> debugOverrides; // @synthesize debugOverrides=_debugOverrides;
@property(retain, nonatomic) id <APSFilterVersionStateMachine> filterVersionStateMachine; // @synthesize filterVersionStateMachine=_filterVersionStateMachine;
@property(retain, nonatomic) id <APSSystemTokenStorage> systemTokenStorage; // @synthesize systemTokenStorage=_systemTokenStorage;
@property(retain, nonatomic) id <APSClientIdentityProvider> clientIdentityProvider; // @synthesize clientIdentityProvider=_clientIdentityProvider;
@property(nonatomic) _Bool serverDisabledFilterOptimization; // @synthesize serverDisabledFilterOptimization=_serverDisabledFilterOptimization;
@property(nonatomic) _Bool locallyDisabledFilterOptimization; // @synthesize locallyDisabledFilterOptimization=_locallyDisabledFilterOptimization;
@property(nonatomic) _Bool hasFilterChanged; // @synthesize hasFilterChanged=_hasFilterChanged;
@property(nonatomic) unsigned int disconnectReason; // @synthesize disconnectReason=_disconnectReason;
@property(retain, nonatomic) NSMutableArray *subscriptionRequests; // @synthesize subscriptionRequests=_subscriptionRequests;
@property(retain, nonatomic) NSNumber *currentMessageID; // @synthesize currentMessageID=_currentMessageID;
@property(readonly, copy, nonatomic) NSString *latestGeoRegion; // @synthesize latestGeoRegion=_latestGeoRegion;
@property(readonly, copy, nonatomic) NSString *ifname; // @synthesize ifname=_ifname;
@property(retain, nonatomic) NSMutableArray *connectionServers; // @synthesize connectionServers=_connectionServers;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) NSDate *lastPresence; // @synthesize lastPresence=_lastPresence;
@property(copy, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(copy, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
@property(copy, nonatomic) NSArray *certificates; // @synthesize certificates=_certificates;
@property(readonly, retain, nonatomic) APSEnvironment *environment; // @synthesize environment=_environment;
@property(nonatomic) _Bool isConnectedToService; // @synthesize isConnectedToService=_isConnectedToService;
@property(nonatomic) __weak id <APSUserCourierDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_sendQueuedOutgoingMessages;	// IMP=0x001000000003db80
- (void)_sendOutgoingMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003d389
- (void)_sendActiveStateMessageWithSendAllBlueListMessages:(_Bool)arg1;	// IMP=0x001000000003d255
- (void)_finishDisconnectForInterface:(id)arg1;	// IMP=0x001000000003cf37
- (void)_disconnectTokenWithReason:(unsigned int)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003cb93
- (void)_sendFilterMessageOnProtocolConnection:(id)arg1 withReason:(unsigned long long)arg2;	// IMP=0x001000000003bf97
- (id)_topicsByHashFromTopicStateDictionary:(id)arg1;	// IMP=0x001000000003bd78
- (void)_requestToSendFilterOnTopicManager:(id)arg1;	// IMP=0x001000000003bbff
- (void)_sendPresenceMessageOnProtocolConnection:(id)arg1 serverTime:(id)arg2;	// IMP=0x001000000003b899
- (void)_didFinishAssertingAllPresences:(id)arg1;	// IMP=0x001000000003b4e8
- (void)handleDisconnectForInterface:(id)arg1 connectionState:(long long)arg2 withReason:(unsigned int)arg3;	// IMP=0x001000000003aac0
- (void)_handleOutgoingMessageAcknowledgment:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003a82a
- (id)_copyParsedPayload:(id)arg1;	// IMP=0x001000000003a523
- (void)_handleMessageMessage:(id)arg1 onProtocolConnection:(id)arg2 withGeneration:(unsigned long long)arg3 isWakingMessage:(_Bool)arg4 fromAgent:(_Bool)arg5;	// IMP=0x0010000000038021
- (_Bool)_wakeCausedByTopic:(id)arg1 interface:(id)arg2 priorityVal:(unsigned long long)arg3 inAllowlist:(_Bool)arg4;	// IMP=0x0010000000037f4b
- (void)_notifyForIncomingMessage:(id)arg1 forConnection:(id)arg2;	// IMP=0x00100000000378f3
- (void)_notifyForIncomingMessage:(id)arg1;	// IMP=0x00100000000378df
- (void)_forceReconnectionsWithReason:(unsigned int)arg1;	// IMP=0x00100000000377a8
- (void)_handleConnectedMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x0010000000035f9f
- (void)receivedConnectedResponseWithParameters:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x0010000000035c42
- (void)_handlePresenceOffline:(id)arg1;	// IMP=0x0010000000035b6b
- (void)connectionDidOpenonProtocolConnection:(id)arg1 secureHandshakeEnabled:(_Bool)arg2;	// IMP=0x0010000000035b57
- (void)updateForReceivedConfig:(id)arg1;	// IMP=0x0010000000035805
- (_Bool)expectsResponseForFilterMessageOnProtocolConnection:(id)arg1 forClient:(id)arg2;	// IMP=0x0010000000035570
- (_Bool)expectsResponseForFilterMessageOnProtocolConnection:(id)arg1;	// IMP=0x0010000000035316
- (_Bool)hasOutOfDateFilterOnProtocolConnection:(id)arg1;	// IMP=0x0010000000035265
- (_Bool)shouldOnlySendFilterOnPreferredInterface;	// IMP=0x0010000000035028
- (void)receivedFilterResponseWithParameters:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000347f6
- (void)protocolConnection:(id)arg1 receivedFilterUpdateWithParameters:(id)arg2;	// IMP=0x0010000000034219
- (void)protocolConnection:(id)arg1 receivedPresenceTrackingRequestWithParameters:(id)arg2;	// IMP=0x00100000000341fe
- (void)protocolConnection:(id)arg1 receivedTaskNotificationWithParameters:(id)arg2;	// IMP=0x0010000000033f82
- (void)protocolConnection:(id)arg1 receivedTaskControlWithParameters:(id)arg2;	// IMP=0x0010000000033d48
- (void)protocolConnection:(id)arg1 receivedNoStorageWithParameters:(id)arg2;	// IMP=0x0010000000033d33
- (void)protocolConnection:(id)arg1 receivedPubSubChannelListWithParameters:(id)arg2;	// IMP=0x0010000000033d19
- (void)protocolConnection:(id)arg1 receivedPubSubChannelUpdateWithParameters:(id)arg2;	// IMP=0x0010000000033cfe
- (void)protocolConnection:(id)arg1 receivedMessageWithParameters:(id)arg2 generation:(unsigned long long)arg3 isWaking:(_Bool)arg4;	// IMP=0x0010000000033cd3
- (void)protocolConnection:(id)arg1 receivedOfflinePresencekWithParameters:(id)arg2;	// IMP=0x0010000000033cbe
- (_Bool)shouldHandleIncomingPush:(id)arg1 forProtocolConnection:(id)arg2;	// IMP=0x00100000000338b9
- (void)outgoingDataAboutToSendForProtocolConnection:(id)arg1;	// IMP=0x00100000000337e0
- (void)efficientToUseChangedForProtocolConnection:(id)arg1;	// IMP=0x00100000000337ce
- (void)protocolConnection:(id)arg1 encounteredError:(id)arg2;	// IMP=0x00100000000337c8
- (void)failedToConnectOnProtocolConnection:(id)arg1;	// IMP=0x00100000000337b6
- (void)didSuspendProtocolConnection:(id)arg1;	// IMP=0x00100000000336da
- (void)didRecoverFromSuspensionOnProtocolConnection:(id)arg1;	// IMP=0x001000000003360a
- (void)protocolConnection:(id)arg1 didDisconnectWithConnectionState:(long long)arg2 reason:(unsigned int)arg3;	// IMP=0x00100000000335f8
- (id)stateForProtocolConnection:(id)arg1;	// IMP=0x0010000000033557
- (void)beginTrackingProtocolConnection:(id)arg1;	// IMP=0x001000000003328f
- (void)enumerateConnectedProtocolConnectionsOfType:(long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00100000000330b9
- (void)enumerateConnectedProtocolConnections:(CDUnknownBlockType)arg1;	// IMP=0x0010000000032f10
- (id)connectedInterfaceForIdentifier:(id)arg1;	// IMP=0x0010000000032e96
- (_Bool)hasConnectedInterfaceForIdentifier:(id)arg1;	// IMP=0x0010000000032e13
- (_Bool)hasConnectedInterfaceOfType:(long long)arg1;	// IMP=0x0010000000032c62
- (_Bool)hasProtocolConnectionInterfaceOfType:(long long)arg1;	// IMP=0x0010000000032af2
@property(readonly, nonatomic) _Bool hasConnectedInterface;
- (long long)countOfConnectedInterface;	// IMP=0x001000000003281f
@property(readonly, nonatomic) id <APSProtocolConnection> preferredProtocolConnection;
- (void)_tryConnectingOrDisconnectingTokens;	// IMP=0x00100000000325b2
- (void)_useInteractivePowerAssertionIfNeededForConnectionServer:(id)arg1 withReason:(id)arg2;	// IMP=0x001000000003247c
- (void)_clearTopicsForGuestUser;	// IMP=0x0010000000032238
- (void)flush;	// IMP=0x0010000000031e41
- (void)logout;	// IMP=0x00100000000318b2
- (unsigned long long)getNextTaskMessageId;	// IMP=0x001000000003189a
- (void)removeTaskServer:(id)arg1;	// IMP=0x0010000000031881
- (void)addTaskServer:(id)arg1;	// IMP=0x0010000000031868
- (void)sendTaskControlMessageWithMetadata:(id)arg1 messageId:(unsigned long long)arg2;	// IMP=0x00100000000317f1
- (void)prepareForFullWake;	// IMP=0x0010000000031714
- (void)prepareForDarkWake;	// IMP=0x0010000000031636
- (void)prepareForSleep;	// IMP=0x0010000000031544
- (void)_handleNoStorageMessage:(id)arg1;	// IMP=0x001000000003153e
- (void)clientIdentityDidBecomeUnavailable;	// IMP=0x0010000000031434
- (void)clientIdentityDidBecomeAvailable;	// IMP=0x001000000003130b
- (void)_fireRecreateCourierStateTimer;	// IMP=0x00100000000312dd
- (void)_recreateCourierStateTimerFired:(id)arg1;	// IMP=0x00100000000311fd
- (void)_clearRecreateCourierStateTimer;	// IMP=0x00100000000311ac
- (_Bool)_hasPendingRecreateCourierStateTimer;	// IMP=0x001000000003119b
- (void)_startRecreateCourierStateTimerBePatient:(_Bool)arg1;	// IMP=0x0010000000030f00
- (_Bool)shouldForceShortTimeouts;	// IMP=0x0010000000030eb7
- (void)outgoingMessageQueue:(id)arg1 requestToSendLowPriorityMessages:(id)arg2;	// IMP=0x0010000000030c50
- (void)outgoingMessageQueue:(id)arg1 requestCriticalMessageFlushWithPaddingLength:(unsigned long long)arg2;	// IMP=0x0010000000030b31
- (void)outgoingMessageQueueShortMessageTimeoutExceeded:(id)arg1;	// IMP=0x0010000000030a4b
- (void)outgoingMessageQueue:(id)arg1 lateAcknowledgmentForCriticalOutgoingMessage:(id)arg2;	// IMP=0x00100000000307d0
- (id)getConnectionTypeFromProtocolConnection:(id)arg1;	// IMP=0x001000000003076a
- (void)topicManagerRequestToSendFilter:(id)arg1;	// IMP=0x0010000000030638
- (_Bool)_processPotentialIdentityChanged;	// IMP=0x0010000000030595
- (void)_processShouldUseInternetChangeIfNecessary;	// IMP=0x001000000003012d
- (MISSING_TYPE *)_processShouldRunChangeIfNecessary;	// IMP=0x001000000003003f
- (void)_processStoredOutgoingMessages;	// IMP=0x0010000000030039
- (void)_processStoredIncomingMessages;	// IMP=0x001000000002fcd3
- (void)_handleLostPushTokens;	// IMP=0x001000000002fbcb
- (void)_recreateCacheDictionaries;	// IMP=0x001000000002fa0e
- (void)_recreateCourierState;	// IMP=0x001000000002f55c
- (void)processIsPowerEfficientToSendChange;	// IMP=0x001000000002f353
- (void)_processInvalidIdentity;	// IMP=0x001000000002f2c4
- (void)systemDidUnlock;	// IMP=0x001000000002f194
- (void)systemDidLock;	// IMP=0x001000000002f06a
- (void)_deleteClientIdentityRequestingReplacement;	// IMP=0x001000000002ef86
- (struct __SecIdentity *)_getClientIdentity;	// IMP=0x001000000002ef42
- (void)generateCert:(id *)arg1 nonce:(id *)arg2 sig:(id *)arg3 time:(id)arg4;	// IMP=0x001000000002ec20
- (void)_clearCachedSigNonceCert;	// IMP=0x001000000002eb40
- (void)refreshCertNonceAndSignatureWithServerTime:(id)arg1;	// IMP=0x001000000002e911
- (void)client:(id)arg1 sendPubSubChannelList:(id)arg2 token:(id)arg3;	// IMP=0x001000000002e8fc
- (void)client:(id)arg1 messageTracingWithStatus:(int)arg2 topic:(id)arg3 tracingUUID:(id)arg4 token:(id)arg5;	// IMP=0x001000000002e69f
- (void)client:(id)arg1 requestTokenGenerateWithTopicHash:(id)arg2 baseToken:(id)arg3 appId:(id)arg4 expirationTTL:(id)arg5 vapidPublicKeyHash:(id)arg6 type:(id)arg7;	// IMP=0x001000000002df56
- (void)client:(id)arg1 requestSendOutgoingMessage:(id)arg2;	// IMP=0x001000000002d9d2
- (void)client:(id)arg1 requestPushAckResponse:(id)arg2 messageId:(id)arg3 token:(id)arg4 connectionType:(id)arg5 generation:(id)arg6;	// IMP=0x001000000002d591
- (void)clientBecameInactive:(id)arg1;	// IMP=0x001000000002d4aa
- (void)requestFilterForClient:(id)arg1;	// IMP=0x001000000002d21c
- (void)pushTokenBecameInvalidForClient:(id)arg1;	// IMP=0x001000000002d141
- (void)_sendClientFilter:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000002c8d4
- (_Bool)_processPendingProxyPresences;	// IMP=0x001000000002b843
- (void)_clearPendingProxyPresence;	// IMP=0x001000000002b54c
- (void)incomingPresenceWithGuid:(id)arg1 token:(id)arg2 hwVersion:(id)arg3 swVersion:(id)arg4 swBuild:(id)arg5 certificate:(id)arg6 nonce:(id)arg7 signature:(id)arg8;	// IMP=0x001000000002b12f
- (void)canUseProxyChanged;	// IMP=0x001000000002b082
- (unsigned long long)_countConnectedClients;	// IMP=0x001000000002aedc
- (unsigned long long)_countActiveClients;	// IMP=0x001000000002ad36
- (id)_findClientWithToken:(id)arg1;	// IMP=0x001000000002aae6
- (id)_findConnectedClientWithToken:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000002a7f9
- (id)_findActiveClientWithToken:(id)arg1;	// IMP=0x001000000002a579
- (void)periodicSignalFired;	// IMP=0x001000000002a001
- (void)invalidateDeviceIdentity;	// IMP=0x0010000000029f54
- (void)ttlCollection:(id)arg1 itemsDidExpire:(id)arg2 withStates:(id)arg3;	// IMP=0x0010000000029e20
- (void)connectionDidClientDisconnect:(id)arg1;	// IMP=0x0010000000029d1a
- (void)connection:(id)arg1 didReceiveIncomingMessageReceiptWithTopic:(id)arg2 tracingUUID:(id)arg3;	// IMP=0x0010000000029adc
- (void)connection:(id)arg1 handleAckIncomingMessageWithGuid:(id)arg2 topic:(id)arg3 tracingUUID:(id)arg4;	// IMP=0x001000000002981a
- (void)connection:(id)arg1 didReceiveFakeMessageToSend:(id)arg2;	// IMP=0x0010000000029091
- (void)connection:(id)arg1 didReceiveCancellationForOutgoingMessageWithID:(unsigned long long)arg2;	// IMP=0x0010000000028fcb
- (void)connection:(id)arg1 didReceiveUnsubscribeToChannels:(id)arg2 forTopic:(id)arg3;	// IMP=0x0010000000028f3d
- (void)connection:(id)arg1 didReceiveSubscribeToChannels:(id)arg2 forTopic:(id)arg3;	// IMP=0x0010000000028eaf
- (void)connection:(id)arg1 didReceiveOutgoingMessageToSend:(id)arg2;	// IMP=0x00100000000289a5
- (void)connection:(id)arg1 subscribeToPreviouslyIgnoredTopics:(id)arg2;	// IMP=0x0010000000028990
- (void)noteOutgoingDataOnProtocolConnection:(id)arg1;	// IMP=0x001000000002887b
- (void)_enqueueMessage:(id)arg1 forOriginator:(id)arg2;	// IMP=0x0010000000028388
- (void)connectionChangedTrackActivityPresence:(id)arg1;	// IMP=0x00100000000282b2
- (void)connectionChangedCriticalReliability:(id)arg1;	// IMP=0x00100000000281a0
- (_Bool)connectionDelegateHasConnectedUser:(id)arg1;	// IMP=0x001000000002817a
- (_Bool)connectionDelegateIsConnectedToService:(id)arg1;	// IMP=0x001000000002816e
- (_Bool)connectionDelegateHasIdentity:(id)arg1;	// IMP=0x001000000002815c
- (void)__performIdleCheck;	// IMP=0x001000000002802a
- (void)_performIdleCheck;	// IMP=0x0010000000027fa3
- (void)connectionWasOpened:(id)arg1;	// IMP=0x0010000000027e9b
- (void)connectionWasClosed:(id)arg1;	// IMP=0x0010000000027c25
- (void)__processStoredIncomingMessagesForConnection:(id)arg1;	// IMP=0x00100000000279d1
- (void)_processStoredIncomingMessagesForConnection:(id)arg1;	// IMP=0x001000000002793f
- (void)connectionTopicsChanged:(id)arg1;	// IMP=0x00100000000278b0
- (void)removeConnectionForConnectionPortName:(id)arg1;	// IMP=0x001000000002784b
- (id)connectionForConnectionPortName:(id)arg1;	// IMP=0x0010000000027835
- (void)addConnection:(id)arg1;	// IMP=0x00100000000276a5
- (void)_logTopics;	// IMP=0x0010000000026d17
- (void)__dumpLogsForInconsistencyIfNecessary;	// IMP=0x0010000000026d11
- (void)_dumpLogsForInconsistencyIfNecessary;	// IMP=0x0010000000026ca2
- (void)_triggerAutoBugCaptureIfMessageIsRetried:(id)arg1;	// IMP=0x0010000000026bd2
- (void)appendPrettyStatusToStatusPrinter:(id)arg1;	// IMP=0x0010000000025b02
- (id)JSONDebugState;	// IMP=0x00100000000252d7
- (id)aps_prettyDescription;	// IMP=0x0010000000024dd5
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (id)verboseDescription;	// IMP=0x00100000000247c9
- (void)logStateWithReason:(id)arg1;	// IMP=0x00100000000246c1
- (_Bool)willBeAbleToConnect;	// IMP=0x0010000000024692
- (_Bool)_requestKeepAliveProxy;	// IMP=0x001000000002468a
- (_Bool)_isConnectable;	// IMP=0x0010000000024662
- (_Bool)_isInteractivePushDuringSleepEnabledForConnectionServer:(id)arg1;	// IMP=0x001000000002465a
@property(readonly, retain, nonatomic) NSData *publicToken; // @dynamic publicToken;
- (unsigned int)_connectionTypeForInterface:(id)arg1;	// IMP=0x0010000000024573
- (_Bool)_hasListeningTopics;	// IMP=0x0010000000024489
- (_Bool)isConnectableRightNow;	// IMP=0x001000000002443e
- (_Bool)isKeepAliveProxyConfigured;	// IMP=0x00100000000243d5
- (_Bool)isInteractivePushDuringSleepEnabled;	// IMP=0x0010000000024253
- (_Bool)isIdle;	// IMP=0x001000000002424b
- (_Bool)wantsCriticalReliability;	// IMP=0x001000000002410d
- (_Bool)hasEagerMessages;	// IMP=0x00100000000240f4
- (_Bool)_useShortKeepAliveInterval;	// IMP=0x00100000000240ec
- (_Bool)isCellularWatch;	// IMP=0x00100000000240e4
@property(readonly, nonatomic) _Bool shouldUseInternet;
- (_Bool)shouldRun;	// IMP=0x001000000002404a
- (void)setLargeMessageSize:(unsigned long long)arg1;	// IMP=0x0010000000023c67
- (unsigned long long)largeMessageSize;	// IMP=0x0010000000023c23
- (void)setMessageSize:(unsigned long long)arg1;	// IMP=0x001000000002397a
@property(readonly, nonatomic) unsigned long long messageSize; // @dynamic messageSize;
- (void)setPublicToken:(id)arg1 fromServer:(_Bool)arg2;	// IMP=0x0010000000023545
- (void)_adjustIsConnectedToService;	// IMP=0x001000000002329d
- (unsigned long long)overallCourierStatus;	// IMP=0x001000000002317f
@property(readonly, nonatomic) _Bool hasIdentity;
- (id)_getCurrentTokens;	// IMP=0x0010000000023105
- (id)copyOperatorName;	// IMP=0x00100000000230ae
- (id)topicManager;	// IMP=0x00100000000230a0
- (id)_proxyManager;	// IMP=0x001000000002305d
- (void)dealloc;	// IMP=0x0010000000022d16
- (id)initWithEnvironment:(id)arg1 courierUser:(id)arg2 userPreferences:(id)arg3 clientIdentityProvider:(id)arg4 userAppIDManager:(id)arg5 systemTokenStorage:(id)arg6 filterVersionStateMachine:(id)arg7 debugOverrides:(id)arg8 delegate:(id)arg9 withConnectionEstablisher:(id)arg10 tokenStore:(id)arg11 tokenRequestQueue:(id)arg12;	// IMP=0x001000000002216a
- (id)initWithEnvironment:(id)arg1 courierUser:(id)arg2 userPreferences:(id)arg3 clientIdentityProvider:(id)arg4 userAppIDManager:(id)arg5 systemTokenStorage:(id)arg6 delegate:(id)arg7 withConnectionEstablisher:(id)arg8;	// IMP=0x0010000000021eb7
- (void)_handlePresenceTrackingResponse:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003f24b
- (void)_generateSalt;	// IMP=0x001000000003f15b
- (void)attemptToRollSalt;	// IMP=0x001000000003ed28
- (_Bool)protocolConnectionHasSentActivityTrackingSalt:(id)arg1;	// IMP=0x001000000003ec62
- (void)markProtocolConnectionDisconnectedForActivityTracking:(id)arg1;	// IMP=0x001000000003eb69
- (void)sendPresenceTrackingRequestOnProtocolConnection:(id)arg1;	// IMP=0x001000000003e92b
- (void)recalculateTrackActivityPresence;	// IMP=0x001000000003e4ee
- (void)_handleAppTokenGenerateResponse:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000436a6
- (id)urlPrefix;	// IMP=0x0010000000043571
- (id)connection:(id)arg1 createURLTokenForToken:(id)arg2;	// IMP=0x00100000000434af
- (void)connection:(id)arg1 didInvalidateTokenForInfo:(id)arg2;	// IMP=0x00100000000430a7
- (void)connection:(id)arg1 didRequestCurrentTokenForInfo:(id)arg2;	// IMP=0x0010000000042d8a
- (void)connection:(id)arg1 didRequestTokenForInfo:(id)arg2;	// IMP=0x00100000000416ff
- (void)saveToken:(id)arg1 forInfo:(id)arg2 connection:(id)arg3;	// IMP=0x0010000000041590
- (void)performAppTokenCleanup;	// IMP=0x0010000000040da8
- (void)_registerAppTokenCleanup;	// IMP=0x0010000000040a1c
- (void)_cancelRequest:(id)arg1;	// IMP=0x00100000000b79bf
- (void)_handlePubSubChannelListRequestonProtocolConnection:(id)arg1;	// IMP=0x00100000000b7954
- (void)_requestClientPubSubChannelList:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000b7902
- (void)_sendProxyChannelList:(id)arg1;	// IMP=0x00100000000b7665
- (id)updateChannelForIncomingMessageWithData:(id)arg1 forTopic:(id)arg2;	// IMP=0x00100000000b73ab
- (_Bool)shouldDropPubSubMessageWithData:(id)arg1 forTopic:(id)arg2;	// IMP=0x00100000000b710c
- (int)_protoUpdateFailureToReadableFailure:(int)arg1;	// IMP=0x00100000000b7100
- (void)_handleChannelUpdateCommand:(id)arg1;	// IMP=0x00100000000b6801
- (void)_handleSubscriptionUpdateCommand:(id)arg1 token:(id)arg2 protocolConnection:(id)arg3;	// IMP=0x00100000000b65af
- (void)_handlePubSubUpdateMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000b6310
- (id)_getNextMessageID;	// IMP=0x00100000000b6236
- (void)subscribeToPreviouslyIgnoredTopics:(id)arg1;	// IMP=0x00100000000b5ffc
- (void)_resetCheckpointForIgnoredTopics:(id)arg1;	// IMP=0x00100000000b5c23
- (void)handleIgnoredTopics:(id)arg1;	// IMP=0x00100000000b59d6
- (void)sendFailuresToClient:(id)arg1 pushTopic:(id)arg2;	// IMP=0x00100000000b566d
- (int)_protoSubscriptionFailureToReadableFailure:(int)arg1;	// IMP=0x00100000000b5661
- (_Bool)_isResponseForProxyDevice:(id)arg1;	// IMP=0x00100000000b53f1
- (void)_handlePubSubSubscriptionResponse:(id)arg1 fromAgent:(_Bool)arg2 onProtocolConnection:(id)arg3;	// IMP=0x00100000000b4348
- (void)_removePendingRequestsForProtocolConnection:(id)arg1;	// IMP=0x00100000000b4119
- (void)_writePubSubMessagetoConnection:(id)arg1 messageID:(unsigned int)arg2 token:(id)arg3 connectionType:(long long)arg4;	// IMP=0x00100000000b3fd5
- (void)_sendPubsubConnectMessageOnProtocolConnection:(id)arg1 token:(id)arg2;	// IMP=0x00100000000b3c7b
- (id)allRegisteredChannelsForTopic:(id)arg1;	// IMP=0x00100000000b3b62
- (void)_retryRequestAfterDelay:(id)arg1 withDelay:(double)arg2;	// IMP=0x00100000000b35bf
- (void)_retryRequestAfterDelay:(id)arg1;	// IMP=0x00100000000b34b3
- (void)_handlePubSubRequest:(id)arg1 unsubscriptionChannels:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b2da3
- (void)unsubscribeFromChannels:(id)arg1 forTopic:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b281b
- (void)subscribeToChannels:(id)arg1 forTopic:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b21d1

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

