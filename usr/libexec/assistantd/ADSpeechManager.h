//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ADAudioSessionCoordinator, ADSpeechCompressor, ADSpeechLog, ADSpeechPlaybackSimulator, ADVolumeService, AFAudioPowerUpdater, AFClientConfiguration, AFDictationOptions, AFInstanceContext, CSAudioDeviceInfo, CSAudioSessionController, CSSiriAudioPlaybackService, CSSiriSpeechRecorder, CSSiriSpeechRecordingContext, CSSpeechController, CoreEmbeddedSpeechRecognizer, MISSING_TYPE, NSArray, NSError, NSString;
@protocol ADSpeechManagerDelegate, ADVolumeServiceProviding, ADVolumeTracking, AFAudioSessionAssertionAcquisitionService, CSSiriRecordingInfoProviding, CSSiriSpeechCapturing, OS_dispatch_queue;

@interface ADSpeechManager : NSObject
{
    CoreEmbeddedSpeechRecognizer *_interactiveLocalSpeechRecognizer;	// 8 = 0x8
    NSString *_localSpeechRecognizerTask;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_queue;	// 24 = 0x18
    AFInstanceContext *_instanceContext;	// 32 = 0x20
    int _speechState;	// 40 = 0x28
    _Bool _shouldTalkToDelegate;	// 44 = 0x2c
    long long _capturingMode;	// 48 = 0x30
    AFClientConfiguration *_clientConfiguration;	// 56 = 0x38
    CSSiriSpeechRecordingContext *_capturingContext;	// 64 = 0x40
    NSError *_recordingError;	// 72 = 0x48
    id <ADSpeechManagerDelegate> _delegate;	// 80 = 0x50
    CDUnknownBlockType _recordStartedCompletion;	// 88 = 0x58
    CDUnknownBlockType _recordStoppedCompletion;	// 96 = 0x60
    _Bool _releasesAudioSessionWhenRecordingStopped;	// 104 = 0x68
    long long _prepareAudioSystemTransactionCount;	// 112 = 0x70
    _Bool _releasesAudioSessionWhenPrepareAudioSystemDone;	// 120 = 0x78
    ADSpeechLog *_speechLog;	// 128 = 0x80
    CSSpeechController *_speechController;	// 136 = 0x88
    CSAudioSessionController *_audioSessionController;	// 144 = 0x90
    id <CSSiriSpeechCapturing> _currentCapturing;	// 152 = 0x98
    CSSiriSpeechRecorder *_speechRecorder;	// 160 = 0xa0
    ADSpeechPlaybackSimulator *_playbackSimulator;	// 168 = 0xa8
    ADSpeechCompressor *_speechCompressor;	// 176 = 0xb0
    ADVolumeService *_volumeService;	// 184 = 0xb8
    CSSiriAudioPlaybackService *_audioPlaybackService;	// 192 = 0xc0
    id _context;	// 200 = 0xc8
    _Bool _isDriving;	// 208 = 0xd0
    _Bool _isAudioSessionLikelyActive;	// 209 = 0xd1
    _Bool _isReleaseAudioSessionRequired;	// 210 = 0xd2
    _Bool _hasPreparedAudioSystemForPlayback;	// 211 = 0xd3
    CSAudioDeviceInfo *_audioDeviceInfo;	// 216 = 0xd8
    NSString *_recordRoute;	// 224 = 0xe0
    NSString *_deviceIdentifier;	// 232 = 0xe8
    _Bool _hasFetchedSmartSiriVolume;	// 240 = 0xf0
    _Bool _hasUpdatedSiriOutputVolume;	// 241 = 0xf1
    unsigned long long _dirtySiriOutputVolumeHostTime;	// 248 = 0xf8
    _Bool _hasReceivedLastAudioBuffer;	// 256 = 0x100
    NSString *_initialDictationLanguage;	// 264 = 0x108
    NSString *_primaryDictationLanguage;	// 272 = 0x110
    NSArray *_dictationLanguages;	// 280 = 0x118
    AFDictationOptions *_dictationOptions;	// 288 = 0x120
    NSArray *_inlineItemList;	// 296 = 0x128
    AFAudioPowerUpdater *_audioPowerUpdater;	// 304 = 0x130
    ADAudioSessionCoordinator *_audioSessionCoordinator;	// 312 = 0x138
}

+ (id)sharedManager;	// IMP=0x00200000002d3bac
+ (id)_speechCodecError;	// IMP=0x00100000002d3b81
+ (id)_badStateError;	// IMP=0x00100000002d3b56
+ (id)_ADSpeechManagerLowPriorityDispatchQueue;	// IMP=0x00100000002d3ac6
- (void).cxx_destruct;	// IMP=0x00200000002cd0f4
@property(readonly, nonatomic) CSSiriAudioPlaybackService *audioPlaybackService; // @synthesize audioPlaybackService=_audioPlaybackService;
@property(readonly, nonatomic) CSAudioSessionController *audioSessionController; // @synthesize audioSessionController=_audioSessionController;
@property(readonly, nonatomic) ADAudioSessionCoordinator *audioSessionCoordinator; // @synthesize audioSessionCoordinator=_audioSessionCoordinator;
@property(readonly, nonatomic) AFAudioPowerUpdater *audioPowerUpdater; // @synthesize audioPowerUpdater=_audioPowerUpdater;
@property(copy, nonatomic) NSArray *inlineItemList; // @synthesize inlineItemList=_inlineItemList;
@property(nonatomic) _Bool isDriving; // @synthesize isDriving=_isDriving;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(copy, nonatomic) AFDictationOptions *dictationOptions; // @synthesize dictationOptions=_dictationOptions;
@property(copy, nonatomic) NSArray *dictationLanguages; // @synthesize dictationLanguages=_dictationLanguages;
@property(copy, nonatomic) NSString *primaryDictationLanguage; // @synthesize primaryDictationLanguage=_primaryDictationLanguage;
@property(copy, nonatomic) NSString *initialDictationLanguage; // @synthesize initialDictationLanguage=_initialDictationLanguage;
- (void)asrBridgeReceivedPartialResult:(id)arg1 language:(id)arg2 tokens:(id)arg3;	// IMP=0x00100000002ccf51
- (void)asrBridgeReceivedFinalResult:(id)arg1 speechPackage:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x00100000002cce70
- (void)asrBridgeReceivedEagerRecognitionCandidate:(id)arg1 rawRecognitionResult:(id)arg2 duration:(double)arg3 sessionUUID:(id)arg4;	// IMP=0x00100000002ccd8f
@property(readonly, nonatomic) id <AFAudioSessionAssertionAcquisitionService> audioSessionAssertionAcquisitionService;
- (void)_getAdjustedSiriOutputVolumeLevelForAudioRoute:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002ccc6b
- (void)adjustSiriOutputVolumeForRouteIfNeeded:(id)arg1;	// IMP=0x00100000002ccbde
- (void)_updateSiriOutputVolume:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002cca4a
- (void)_fetchSmartSiriVolumeForType:(unsigned long long)arg1 forceFetch:(_Bool)arg2;	// IMP=0x00100000002cc8b4
- (void)_fetchSmartSiriVolume:(_Bool)arg1;	// IMP=0x00100000002cc89b
- (id)_volumeService;	// IMP=0x00100000002cc74e
- (_Bool)_supportsVolumeService;	// IMP=0x00100000002cc733
- (void)setEARLanguageDetectorSpeechRequestId:(id)arg1;	// IMP=0x00100000002cc6a6
- (void)_addRecordStoppedCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000002cc5bf
- (void)setEndpointerDelayedTrigger:(_Bool)arg1;	// IMP=0x00100000002cc571
- (void)setEndpointerThreshold:(double)arg1;	// IMP=0x00100000002cc521
- (void)updateSpeechSynthesisRecord:(id)arg1;	// IMP=0x00100000002cc494
@property(readonly, nonatomic) id <CSSiriRecordingInfoProviding> recordingInfoProvider;
@property(readonly, nonatomic) id <ADVolumeServiceProviding> volumeServiceProvider;
@property(readonly, nonatomic) id <ADVolumeTracking> volumeTracker;
- (void)getLastStartpointTimestampAndCurrentTime:(CDUnknownBlockType)arg1;	// IMP=0x00100000002cc3ec
- (void)stopFingerprintingForSuccess:(_Bool)arg1;	// IMP=0x00100000002cc39e
- (void)updateSpeechOptions:(id)arg1;	// IMP=0x00100000002cc2c7
- (void)playRecordingStartAlert;	// IMP=0x00100000002cc27c
- (void)setSpeechRecognizedContext:(id)arg1;	// IMP=0x00100000002cc1ef
- (void)enforcePreviousEndpointHint;	// IMP=0x00100000002cc1a4
- (void)updateEndpointHintForRC:(id)arg1 forceAccept:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00100000002cc0e1
- (void)updateOptionsAfterRecognitionForElapsedTime:(double)arg1 isFinal:(_Bool)arg2;	// IMP=0x00100000002cc08e
- (void)updateServerEndpointFeatures:(id)arg1;	// IMP=0x00100000002cc001
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange)arg1;	// IMP=0x00100000002cbfac
- (void)setFingerprintWasRecognized;	// IMP=0x00100000002cbf61
- (void)suppressAudioInterruptionEndedNotificationsAndEndSessionIfIdle:(CDUnknownBlockType)arg1;	// IMP=0x00100000002cbed4
- (_Bool)_endSessionIfIdle;	// IMP=0x00100000002cbde4
- (void)_cancelRecordingIfNeededAndEndSessionWhenIdleWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000002cb978
- (void)endSession:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002cb77d
- (void)endSession;	// IMP=0x00100000002cb5f9
- (void)setSuppressAudioInterruptionEndedNotifications:(_Bool)arg1;	// IMP=0x00100000002cb5ab
- (void)_stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x00100000002cb2ef
- (void)stopSpeechCaptureIfFingerprintingOnlyWithOptions:(id)arg1;	// IMP=0x00100000002cb190
- (void)stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x00100000002cb010
- (void)cancelSpeechCaptureSuppressingAlert:(_Bool)arg1;	// IMP=0x00100000002caedd
- (void)startSpeechCaptureWithURL:(id)arg1 isNarrowBand:(_Bool)arg2 isDictation:(_Bool)arg3 sessionUUID:(id)arg4;	// IMP=0x00100000002cadd4
- (void)addRecordedDictationAudioSampleData:(id)arg1;	// IMP=0x00100000002cad47
- (void)startRecordedDictationCaptureWithSessionUUID:(id)arg1 narrowband:(_Bool)arg2 secureOfflineOnly:(_Bool)arg3;	// IMP=0x00100000002cac76
- (void)_startCaptureForMode:(long long)arg1 options:(id)arg2 context:(id)arg3;	// IMP=0x00100000002ca29a
- (id)_startFixedPriorityCaptureForMode:(long long)arg1 options:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x00100000002ca0ec
- (void)startAcousticIDCaptureWithOptions:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x00100000002ca0c6
- (MISSING_TYPE *)startSpeechCaptureForDictationWithOptions:sessionUUID:secureOfflineOnly: /* Error: Ran out of types for this method. */;	// IMP=0x00100000002c9f6f
- (id)startSpeechCaptureForRequestWithOptions:(id)arg1 sessionUUID:(id)arg2 language:(id)arg3;	// IMP=0x00100000002c9e89
- (_Bool)isStopped;	// IMP=0x00100000002c9dfb
- (_Bool)isCapturing;	// IMP=0x00100000002c9d6d
- (void)setClientConfiguration:(id)arg1;	// IMP=0x00100000002c9ce0
- (void)setDelegate:(id)arg1;	// IMP=0x00100000002c9c53
- (void)_prepareAudioSystemWithContext:(id)arg1 audioSessionAssertion:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00100000002c92fa
- (void)prepareAudioSystemWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002c917d
- (void)preheatRecognizerWithOptions:(id)arg1;	// IMP=0x00100000002c9067
- (void)preheatWithOptions:(id)arg1;	// IMP=0x00100000002c8f51
- (void)eagerlyInitializeAudioRecording;	// IMP=0x00100000002c8f06
- (void)localSpeechRecognizer:(id)arg1 didCompletionRecognitionWithStatistics:(id)arg2 error:(id)arg3;	// IMP=0x00100000002c8e19
- (void)localSpeechRecognizer:(id)arg1 didProduceLoggablePackage:(id)arg2;	// IMP=0x00100000002c8d62
- (void)localSpeechRecognizer:(id)arg1 didRecognizePackage:(id)arg2;	// IMP=0x00100000002c8cab
- (void)localSpeechRecognizer:(id)arg1 didRecognizeRawEagerRecognitionCandidate:(id)arg2;	// IMP=0x00100000002c8c1e
- (void)localSpeechRecognizer:(id)arg1 didProcessAudioDuration:(double)arg2;	// IMP=0x00100000002c8b82
- (void)localSpeechRecognizer:(id)arg1 didRecognizeTokens:(id)arg2;	// IMP=0x00100000002c8acb
- (void)audioPowerUpdaterDidUpdate:(id)arg1 averagePower:(float)arg2 peakPower:(float)arg3;	// IMP=0x00100000002c8aae
- (id)_recordingInfo;	// IMP=0x00100000002c8a5e
- (id)getRecordingInfo;	// IMP=0x00100000002c89a5
- (void)getRecordingInfoUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000002c890e
- (void)getVolumeServiceUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000002c8877
- (void)setDirtySiriOutputVolumeHostTime:(unsigned long long)arg1;	// IMP=0x00100000002c8828
- (void)audioSessionCoordinator:(id)arg1 releaseAudioSessionWithContext:(id)arg2;	// IMP=0x00100000002c86ea
- (void)audioSessionCoordinator:(id)arg1 prepareAudioSessionWithContext:(id)arg2;	// IMP=0x00100000002c85ac
- (void)speechCapturingDidProvideConfidenceScores:(id)arg1 classification:(unsigned long long)arg2 classifiedUser:(id)arg3 unknownUserScore:(long long)arg4 duration:(long long)arg5 version:(long long)arg6 thresholdingType:(id)arg7 assetVersion:(id)arg8;	// IMP=0x00100000002c84bd
- (void)speechCapturing:(id)arg1 languageDetectorDidFail:(id)arg2;	// IMP=0x00100000002c8461
- (void)speechCapturing:(id)arg1 didDetectLanguage:(id)arg2 confidenceScores:(id)arg3 isConfident:(_Bool)arg4;	// IMP=0x00100000002c8446
- (void)speechCapturing:(id)arg1 didLoseAudioSessionOwnerOrMediaServices:(id)arg2;	// IMP=0x00100000002c8388
- (void)speechCapturing:(id)arg1 didInterruptAudioSession:(id)arg2;	// IMP=0x00100000002c82ca
- (void)speechCapturing:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00100000002c81cf
- (void)speechCapturing:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00100000002c80db
- (void)speechCapturingDidRequestUpdateSiriOutputVolume:(id)arg1;	// IMP=0x00100000002c7ffc
- (void)speechCapturingDidRequestShutdownUI:(id)arg1;	// IMP=0x00100000002c7f60
- (void)speechCapturingDidRequestQuickStop:(id)arg1;	// IMP=0x00100000002c7ec4
- (void)speechCapturing:(id)arg1 performTwoShotPromptWithType:(long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00100000002c7eac
- (void)speechCapturing:(id)arg1 didDetectEndpointAtTime:(double)arg2;	// IMP=0x00100000002c7e9a
- (void)speechCapturing:(id)arg1 didDetectStartpointAtTime:(double)arg2;	// IMP=0x00100000002c7e88
- (void)speechCapturing:(id)arg1 didFinishWritingAudioFile:(id)arg2 error:(id)arg3;	// IMP=0x00100000002c7e70
- (void)speechCapturingDidDelayEndpointForMusic:(id)arg1;	// IMP=0x00100000002c7e5e
- (void)speechCapturingDidDetectMusic:(id)arg1;	// IMP=0x00100000002c7e4c
- (void)speechCapturing:(id)arg1 didReceiveFingerprint:(id)arg2 duration:(double)arg3;	// IMP=0x00100000002c7e37
- (void)speechCapturingDidRecordPCMAudioData:(id)arg1;	// IMP=0x00100000002c7e31
- (void)speechCapturingDidRecordSpeechPackets:(id)arg1 atTimestamp:(double)arg2 totalPacketCount:(long long)arg3;	// IMP=0x00100000002c7cde
- (void)speechCapturingDidStopRecordingWithError:(id)arg1 endpointMode:(long long)arg2 totalPacketCount:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x00100000002c7bf3
- (void)speechCapturingWillStopRecordingWithSignpostID:(unsigned long long)arg1;	// IMP=0x00100000002c7be1
- (void)speechCapturingWillStopRecording;	// IMP=0x00100000002c7bca
- (void)speechCapturingDidReceiveLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00100000002c7a8e
- (void)speechCapturingDidUpdateAudioDeviceInfo:(id)arg1;	// IMP=0x00100000002c7a7c
- (void)speechCapturingDidUpdateRecordingInfo:(id)arg1;	// IMP=0x00100000002c79d6
- (void)speechCapturingDidStartRecordingSuccessfully:(_Bool)arg1 error:(id)arg2 withInfo:(id)arg3;	// IMP=0x00100000002c6a01
- (void)_updateCapturingStateWithOptions:(id)arg1;	// IMP=0x00100000002c6914
- (void)_recordingStoppedWithError:(id)arg1 totalPacketCount:(long long)arg2 endpointMode:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x00100000002c6605
- (void)_lastAudioBufferReceivedWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00100000002c64ba
- (void)_cancelRecordingWithError:(id)arg1 suppressAlert:(_Bool)arg2;	// IMP=0x00100000002c633c
- (void)_tellDelegateSpeechWillStopRecordingWithSignpostID:(unsigned long long)arg1;	// IMP=0x00100000002c62f7
- (void)_tellDelegateDidDetectLanguage:(id)arg1 confidenceScores:(id)arg2 isConfident:(_Bool)arg3;	// IMP=0x00100000002c6275
- (void)_tellDelegateDidSetAudioSessionActive:(_Bool)arg1;	// IMP=0x00100000002c6232
- (void)_tellDelegateWillSetAudioSessionActive:(_Bool)arg1;	// IMP=0x00100000002c61ef
- (void)_tellDelegateShutdownUIWasRequested;	// IMP=0x00100000002c61b5
- (void)_tellDelegateQuickStopWasRequested;	// IMP=0x00100000002c617b
- (void)_tellDelegateToPerformTwoShotPromptWithType:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002c6116
- (void)_tellDelegateSpeechEndpointWasDetectedAtTime:(double)arg1;	// IMP=0x00100000002c60ca
- (void)_tellDelegateSpeechStartpointWasDetectedAtTime:(double)arg1;	// IMP=0x00100000002c607e
- (void)_tellDelegateAudioFileDidFinish:(id)arg1 error:(id)arg2;	// IMP=0x00100000002c5ffc
- (void)_tellDelegateAboutInputAveragePower:(float)arg1 peak:(float)arg2;	// IMP=0x00100000002c5f14
- (void)_tellDelegateEndpointWasDelayedForMusic;	// IMP=0x00100000002c5e40
- (void)_tellDelegateMusicWasDetected;	// IMP=0x00100000002c5d6c
- (void)_tellDelegateAboutFingerprint:(id)arg1 duration:(double)arg2;	// IMP=0x00100000002c5c87
- (void)_tellDelegateAboutSpeechPackets:(id)arg1 atTimestamp:(double)arg2 count:(long long)arg3;	// IMP=0x00100000002c5b94
- (void)_tellDelegateUpdateAudioInfo:(id)arg1;	// IMP=0x00100000002c5ab5
- (void)_tellDelegateSpeechStartedWithRecordingInfo:(id)arg1;	// IMP=0x00100000002c59d6
- (void)_tellDelegateSpeechWillBeginWithTimestamp:(double)arg1 isFromFile:(_Bool)arg2 isAudioPowerUpdateDisabled:(_Bool)arg3;	// IMP=0x00100000002c5874
- (void)_tellDelegateSpeechRecognitionUpdateWillBegin;	// IMP=0x00100000002c579c
- (void)_tellDelegateSpeechShouldPreheatWithRecordingInfo:(id)arg1;	// IMP=0x00100000002c56bd
- (void)_tellDelegateSpeechFinished;	// IMP=0x00100000002c55c6
- (void)_tellDelegateSpeechReceivedLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00100000002c54cc
- (void)_tellDelegateSpeechFailedWithError:(id)arg1;	// IMP=0x00100000002c53d8
- (void)_tellDelegateSpeechCanceled;	// IMP=0x00100000002c52e1
- (void)_cleanUpDelegateInfo;	// IMP=0x00100000002c5224
- (void)resetLocalRecognizer;	// IMP=0x00100000002c51d9
- (void)cancelLocalRecognitionIfActive;	// IMP=0x00100000002c518e
- (_Bool)isLocallyRecognizingInSiriMiniMode;	// IMP=0x00100000002c50f0
- (_Bool)isLocallyRecognizingInDictationMode;	// IMP=0x00100000002c5062
- (_Bool)isLocallyRecognizing;	// IMP=0x00100000002c4fd4
- (void)disableDESWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000002c4f47
- (void)getOfflineDictationStatusIgnoringCache:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000002c4ea8
- (id)_interactiveLocalSpeechRecognizer;	// IMP=0x00100000002c4db0
- (void)_fetchAssetsForLanguageOrEnablementNotification:(id)arg1;	// IMP=0x00100000002c4d65
- (void)dictationSessionDidComplete;	// IMP=0x00100000002c4d1a
- (_Bool)_releaseSession;	// IMP=0x00100000002c4769
- (void)_updateRecordRoute:(id)arg1 andDeviceIdentifier:(id)arg2;	// IMP=0x00100000002c4582
- (void)_updateAudioDeviceInfo:(id)arg1;	// IMP=0x00100000002c440f
- (void)_updateSpeechState:(int)arg1;	// IMP=0x00100000002c42b1
- (id)_currentSpeechCaptureSource;	// IMP=0x00100000002c41cc
- (id)_speechCompressor;	// IMP=0x00100000002c402d
- (id)endpointerModelVersion;	// IMP=0x00100000002c4014
- (void)getSpeechRecorderVTSatScore:(CDUnknownBlockType)arg1;	// IMP=0x00100000002c3f87
- (id)_speechRecorder;	// IMP=0x00100000002c3dd6
- (void)dealloc;	// IMP=0x00100000002c3d40
- (id)_initWithInstanceContext:(id)arg1;	// IMP=0x00100000002c3909

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

