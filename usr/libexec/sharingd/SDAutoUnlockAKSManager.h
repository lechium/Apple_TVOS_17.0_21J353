//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSData, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_source;

@interface SDAutoUnlockAKSManager : NSObject
{
    _Bool _wristDetectDisabled;	// 8 = 0x8
    _Bool _autoUnlockDisabledDueToManagement;	// 9 = 0x9
    _Bool _t208Machine;	// 10 = 0xa
    struct os_unfair_lock_s _cachedSessionKeysLock;	// 12 = 0xc
    NSString *_localDeviceID;	// 16 = 0x10
    NSString *_state;	// 24 = 0x18
    NSData *_localAttestedLTK;	// 32 = 0x20
    NSData *_localLTK;	// 40 = 0x28
    NSString *_altDSID;	// 48 = 0x30
    NSObject<OS_dispatch_source> *_keybagAssertionTimer;	// 56 = 0x38
    NSMutableDictionary *_remoteLTKs;	// 64 = 0x40
    NSMutableDictionary *_cachedSessions;	// 72 = 0x48
    NSMutableDictionary *_cachedSessionKeys;	// 80 = 0x50
    NSMutableDictionary *_watchIDsToPairingRecords;	// 88 = 0x58
    NSMutableDictionary *_preferredRemoteLTKForDeviceID;	// 96 = 0x60
    NSMutableDictionary *_escrowSecretForDeviceID;	// 104 = 0x68
    NSMutableArray *_watchIDsMissingSessionKey;	// 112 = 0x70
    NSString *_remoteLTKStorageFilePath;	// 120 = 0x78
    NSString *_watchIDsToPairingRecordsStorageFilePath;	// 128 = 0x80
    NSString *_companionIDStorageFilePath;	// 136 = 0x88
    NSString *_watchIDToCompanionIDStorageFilePath;	// 144 = 0x90
}

+ (_Bool)useKeychainForLTKSyncing;	// IMP=0x00200000000c82c8
+ (id)sharedManager;	// IMP=0x00100000000bc830
- (void).cxx_destruct;	// IMP=0x00200000000cb1ff
@property(readonly, nonatomic) struct os_unfair_lock_s cachedSessionKeysLock; // @synthesize cachedSessionKeysLock=_cachedSessionKeysLock;
@property(copy, nonatomic) NSString *watchIDToCompanionIDStorageFilePath; // @synthesize watchIDToCompanionIDStorageFilePath=_watchIDToCompanionIDStorageFilePath;
@property(copy, nonatomic) NSString *companionIDStorageFilePath; // @synthesize companionIDStorageFilePath=_companionIDStorageFilePath;
@property(copy, nonatomic) NSString *watchIDsToPairingRecordsStorageFilePath; // @synthesize watchIDsToPairingRecordsStorageFilePath=_watchIDsToPairingRecordsStorageFilePath;
@property(copy, nonatomic) NSString *remoteLTKStorageFilePath; // @synthesize remoteLTKStorageFilePath=_remoteLTKStorageFilePath;
@property(retain, nonatomic) NSMutableArray *watchIDsMissingSessionKey; // @synthesize watchIDsMissingSessionKey=_watchIDsMissingSessionKey;
@property(retain, nonatomic) NSMutableDictionary *escrowSecretForDeviceID; // @synthesize escrowSecretForDeviceID=_escrowSecretForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *preferredRemoteLTKForDeviceID; // @synthesize preferredRemoteLTKForDeviceID=_preferredRemoteLTKForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *watchIDsToPairingRecords; // @synthesize watchIDsToPairingRecords=_watchIDsToPairingRecords;
@property(retain, nonatomic) NSMutableDictionary *cachedSessionKeys; // @synthesize cachedSessionKeys=_cachedSessionKeys;
@property(retain, nonatomic) NSMutableDictionary *cachedSessions; // @synthesize cachedSessions=_cachedSessions;
@property(retain, nonatomic) NSMutableDictionary *remoteLTKs; // @synthesize remoteLTKs=_remoteLTKs;
@property(retain) NSObject<OS_dispatch_source> *keybagAssertionTimer; // @synthesize keybagAssertionTimer=_keybagAssertionTimer;
@property(copy, nonatomic) NSString *altDSID; // @synthesize altDSID=_altDSID;
@property(copy, nonatomic) NSData *localLTK; // @synthesize localLTK=_localLTK;
@property(nonatomic) _Bool t208Machine; // @synthesize t208Machine=_t208Machine;
@property(nonatomic) _Bool autoUnlockDisabledDueToManagement; // @synthesize autoUnlockDisabledDueToManagement=_autoUnlockDisabledDueToManagement;
@property(copy, nonatomic) NSData *localAttestedLTK; // @synthesize localAttestedLTK=_localAttestedLTK;
@property(nonatomic) _Bool wristDetectDisabled; // @synthesize wristDetectDisabled=_wristDetectDisabled;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *localDeviceID; // @synthesize localDeviceID=_localDeviceID;
- (void)updateDynamicStoreEnabled;	// IMP=0x00100000000cb025
- (id)baseDictionary;	// IMP=0x00100000000cafb5
- (id)baseLocalKeysDictionary;	// IMP=0x00100000000caf68
- (id)baseLocalKeysDictionaryForDevice:(id)arg1 type:(id)arg2;	// IMP=0x00100000000caeb9
- (id)baseModernSyncedDictionary;	// IMP=0x00100000000cae46
- (id)attestedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000cada0
- (id)modernSyncedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000cacfb
- (id)baseSyncedDictionary;	// IMP=0x00100000000cacae
- (id)syncedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000cac09
- (id)baseRangingDictionary;	// IMP=0x00100000000cab96
- (id)baseRangingDictionaryForDevice:(id)arg1;	// IMP=0x00100000000cab27
- (id)keychainDataForQuery:(id)arg1;	// IMP=0x00100000000ca9fb
- (void)deleteAllRangingKeys;	// IMP=0x00100000000ca831
- (void)deleteRangingKeyForDeviceID:(id)arg1;	// IMP=0x00100000000ca691
- (_Bool)storeRangingKey:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00100000000ca430
- (id)rangingKeyForDeviceID:(id)arg1;	// IMP=0x00100000000ca3d1
- (id)sessionKeyForDeviceID:(id)arg1;	// IMP=0x00100000000ca263
- (_Bool)sessionKeyExistsForDeviceID:(id)arg1;	// IMP=0x00100000000ca230
- (id)deriveKeyFromSharedSecret:(id)arg1;	// IMP=0x00100000000ca124
- (void)updateSessionKeys;	// IMP=0x00100000000c9dbb
- (void)updateRangingKeysIfNeccesary;	// IMP=0x00100000000c9a2a
- (void)deleteLocalAttestedLTK;	// IMP=0x00100000000c9934
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2 attested:(_Bool)arg3;	// IMP=0x00000000000c985a
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c9845
- (id)ltkInfoForDeviceID:(id)arg1;	// IMP=0x00100000000c9831
- (id)longTermKeyIDForDeviceID:(id)arg1;	// IMP=0x00100000000c9783
- (id)longTermKeyForDevice:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c9733
- (id)anyLongTermKeyForDeviceID:(id)arg1;	// IMP=0x00100000000c96a4
- (void)deleteRemoteLongTermKeyForDeviceID:(id)arg1 modern:(_Bool)arg2 tombstone:(_Bool)arg3;	// IMP=0x00100000000c95c3
- (_Bool)storeAttestedLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00100000000c933e
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3 modern:(_Bool)arg4;	// IMP=0x00100000000c90a0
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00100000000c8ff7
- (void)deleteAllEscrowSecrets;	// IMP=0x00100000000c8f2c
- (void)deleteEscrowSecretForDeviceID:(id)arg1;	// IMP=0x00100000000c8e11
- (id)escrowSecretCreationDateForDeviceID:(id)arg1;	// IMP=0x00100000000c8cd6
- (_Bool)escrowSecretExistsForDevice:(id)arg1;	// IMP=0x00100000000c8c0c
- (_Bool)storeEscrowSecret:(id)arg1 pairingID:(id)arg2 deviceID:(id)arg3 requiresUnlock:(_Bool)arg4;	// IMP=0x00100000000c8a94
- (id)keyPairingIDForDeviceID:(id)arg1;	// IMP=0x00100000000c89dc
- (void)expireAllCachedEscrowSecrets;	// IMP=0x00100000000c893f
- (_Bool)cachedEscrowSecretIsValidForDeviceID:(id)arg1;	// IMP=0x00100000000c88a3
- (_Bool)cachedEscrowSecretExistsForDeviceID:(id)arg1;	// IMP=0x00100000000c8820
- (id)escrowSecretForDevice:(id)arg1;	// IMP=0x00100000000c844b
- (_Bool)storeKeychainItemWithAttributeDictionary:(id)arg1 updateDictionary:(id)arg2 addDictionary:(id)arg3;	// IMP=0x00100000000c82d0
- (id)autoUnlockFolderPath;	// IMP=0x00100000000c81c2
- (id)loadCompanionIDs;	// IMP=0x00100000000c7dda
- (void)deleteLegacyCompanionIDs;	// IMP=0x00100000000c7cbd
- (id)migrateLegacyCompanionIDs:(id)arg1;	// IMP=0x00100000000c7bc0
- (id)loadLegacyWatchIDToCompanionIDMapping;	// IMP=0x00100000000c78e7
- (void)deleteLegacyWatchToCompanionIDs;	// IMP=0x00100000000c77ca
- (void)migrateLegacyWatchIDToCompanionIDs;	// IMP=0x00100000000c7673
- (void)loadWatchIDsToPairingRecords;	// IMP=0x00100000000c75e5
- (void)saveWatchIDsToPairingRecords;	// IMP=0x00100000000c7435
- (void)removePairingRecordForWatchID:(id)arg1;	// IMP=0x00100000000c73b6
- (void)removePairingIDForWatchID:(id)arg1;	// IMP=0x00100000000c7256
- (id)pairingIDForWatchID:(id)arg1;	// IMP=0x00100000000c71ae
- (void)setPairingID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00100000000c701e
- (void)removeCompanionIDForWatchID:(id)arg1;	// IMP=0x00100000000c6ebe
- (id)companionIDForWatchID:(id)arg1;	// IMP=0x00100000000c6e16
- (void)setCompanionID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00100000000c6c86
- (id)allPairedWatchDeviceIDs;	// IMP=0x00100000000c6c36
- (void)reloadPairingRecordsIfNeeded;	// IMP=0x00100000000c6b9a
- (void)loadRemoteLTKs;	// IMP=0x00100000000c667f
- (void)loadRemoteLTKsIfNeeded;	// IMP=0x00100000000c6636
- (void)saveRemoteLTKs;	// IMP=0x00100000000c6486
- (void)clearRemoteLTKs;	// IMP=0x00100000000c63b0
- (void)removeRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c62b4
- (void)addRemoteLTK:(id)arg1 ltkHash:(id)arg2 ltkModDate:(id)arg3 modernLTK:(id)arg4 modernLTKHash:(id)arg5 modernLTKModeDate:(id)arg6 deviceID:(id)arg7;	// IMP=0x00100000000c5fee
- (_Bool)disablePairingWithKeyDevice:(id)arg1;	// IMP=0x00100000000c5f17
- (_Bool)ltkExistsForKeyDevice:(id)arg1 updateLTKs:(_Bool)arg2;	// IMP=0x00100000000c5dad
- (_Bool)ltkExistsForKeyDevice:(id)arg1;	// IMP=0x00100000000c5d99
- (void)removeAllRemoteLTKsOnSignOut;	// IMP=0x00100000000c5ab7
- (void)disablePairingForAllKeyDevices;	// IMP=0x00100000000c57c3
- (void)deleteEscrowSecretForPhones;	// IMP=0x00100000000c5439
- (void)deleteEscrowSecretForAllDevices;	// IMP=0x00100000000c5057
- (void)handleRequiredStateDisabled;	// IMP=0x00100000000c5051
- (_Bool)deviceEnabledAsKey:(id)arg1;	// IMP=0x00100000000c4f09
- (_Bool)deviceEnabledAsKeyForAnyMac;	// IMP=0x00100000000c4c5d
- (_Bool)deviceEnabledAsKeyForAnyDevice;	// IMP=0x00100000000c494d
- (_Bool)deviceEnabledAsKeyForAnyIDSMac;	// IMP=0x00100000000c46a1
- (_Bool)deviceEnabledAsKeyForAnyIDSDevice;	// IMP=0x00100000000c4391
- (_Bool)localDeviceEnabledAsKeyForMac;	// IMP=0x00100000000c431f
- (_Bool)localDeviceEnabledAsKey;	// IMP=0x00100000000c42ad
- (void)transport:(id)arg1 didReceivePayload:(id)arg2 type:(unsigned short)arg3 deviceID:(id)arg4;	// IMP=0x00100000000c41e0
- (void)handleLTKResponse:(id)arg1;	// IMP=0x00100000000c41da
- (void)restartKeybagAssertionTimer;	// IMP=0x00100000000c3fe6
- (void)releaseKeybagAssertion;	// IMP=0x00100000000c3f8a
- (void)takeMobileKeybagAssertion;	// IMP=0x00100000000c3f2e
- (id)ltksForRequest:(id)arg1;	// IMP=0x00100000000c392e
- (void)handleLTKRequest:(id)arg1;	// IMP=0x00100000000c3928
- (void)sendLTKResponseWithPayload:(id)arg1 viewState:(id)arg2 needsUnlock:(id)arg3 currentlySyncing:(id)arg4;	// IMP=0x00100000000c3922
- (void)fetchLTKsFromCompanionForDeviceID:(id)arg1 needsLTK:(_Bool)arg2 remoteNeedsLTK:(_Bool)arg3 checkViewState:(_Bool)arg4;	// IMP=0x00100000000c391c
- (void)fetchLTKsFromCompanion:(_Bool)arg1;	// IMP=0x00100000000c3900
- (void)updatePreferredRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c3552
- (id)remoteLTKList;	// IMP=0x00100000000c334c
- (id)remoteLTKEntryForDeviceID:(id)arg1;	// IMP=0x00100000000c32d2
- (id)remoteLTKHashForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c3263
- (_Bool)hashMatchesAnyRemoteLTKForDeviceID:(id)arg1 ltkHash:(id)arg2 isPreferred:(_Bool *)arg3;	// IMP=0x00100000000c2ef6
- (id)remoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c2e18
- (id)allRemoteLTKData;	// IMP=0x00100000000c2cec
- (void)signAndStoreRemoteLTK:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00100000000c2881
- (id)signedDevices;	// IMP=0x00100000000c272d
- (id)modernSignedDevices;	// IMP=0x00100000000c25d9
- (id)modificationDataForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c2446
- (id)keychainDevices:(_Bool)arg1;	// IMP=0x00100000000c2192
- (id)allKeychainDevices;	// IMP=0x00100000000c217e
- (_Bool)signLTK:(id)arg1 ltkModDate:(id)arg2 modernLTK:(id)arg3 modernLTKModDate:(id)arg4 deviceID:(id)arg5;	// IMP=0x00100000000c1dc9
- (_Bool)signLTK:(id)arg1 modernLTK:(id)arg2 forDeviceID:(id)arg3;	// IMP=0x00100000000c1d9f
- (_Bool)signLTKsForDeviceID:(id)arg1;	// IMP=0x00100000000c1cfb
- (void)resignRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c1ce9
- (void)checkRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c1ad6
- (void)checkRemoteLTKs;	// IMP=0x00100000000c1ad0
- (void)updateRemoteLTKs;	// IMP=0x00100000000c1aba
- (void)updateLTKsForDeviceID:(id)arg1 staleRemoteLTK:(_Bool)arg2;	// IMP=0x00100000000c1244
- (void)generateLocalAttestedLTKIfNeccessaryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000000c11aa
- (int)ltkSyncStatusForDeviceID:(id)arg1 hash:(id)arg2 modern:(_Bool)arg3;	// IMP=0x00100000000c102b
- (_Bool)deviceIsLocalDevice:(id)arg1;	// IMP=0x00100000000c0fbd
- (long long)keyClassForDeviceID:(id)arg1;	// IMP=0x00100000000c0edc
- (long long)ltkKeyClass;	// IMP=0x00100000000c0e6a
- (void)updateLocalLTKForSignout;	// IMP=0x00100000000c0d1f
- (id)ltkHashForLocalLTK;	// IMP=0x00100000000c0ca0
- (void)checkLocalAttestedLTK;	// IMP=0x00100000000c0c9a
- (void)checkLocalLTK;	// IMP=0x00100000000c0498
- (void)generateLocalLTKWithAttestation:(_Bool)arg1 forceDCRTRetrievalWithCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00100000000bfe81
- (void)generateLocalLTKWithAttestation:(_Bool)arg1;	// IMP=0x00100000000bfe6d
- (_Bool)loadLocalAttestedLTKIfNecessary;	// IMP=0x00100000000bfe65
- (_Bool)loadLocalLTK;	// IMP=0x00100000000bf8db
- (id)deviceIDsMissingSessionKey;	// IMP=0x00100000000bf7b5
- (void)clearAllDeviceIDsMissingSessionKeys;	// IMP=0x00100000000bf68f
- (void)removeDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00100000000bf54d
- (void)addDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00100000000bf3d4
- (id)decryptMessage:(id)arg1 authTag:(id)arg2 nonce:(id)arg3 bluetoothID:(id)arg4 cachedDevices:(_Bool)arg5 errorCode:(long long *)arg6;	// IMP=0x00100000000be959
- (_Bool)encryptMessageData:(id)arg1 deviceID:(id)arg2 encryptedMessage:(id *)arg3 authTag:(id *)arg4 nonce:(id *)arg5;	// IMP=0x00100000000be623
- (_Bool)canCreateTokenSessionForDeviceID:(id)arg1;	// IMP=0x00100000000be5d9
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 externalACMContext:(id)arg3;	// IMP=0x00100000000be357
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00100000000be342
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 usingEscrow:(_Bool)arg3 attestation:(_Bool)arg4;	// IMP=0x00100000000bdf7e
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00100000000bdf66
- (id)aksRegistrationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00100000000bddc7
- (id)aksPairingSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 errorCode:(long long *)arg3 wantsAttestation:(_Bool)arg4 needsEscrow:(_Bool)arg5;	// IMP=0x00100000000bdb66
- (void)consoleUserChanged:(id)arg1;	// IMP=0x00100000000bda47
- (void)handleKeyBagLockStateChanged;	// IMP=0x00100000000bda41
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x00100000000bd985
- (void)appleAccountSignedOut:(id)arg1;	// IMP=0x00100000000bd8d7
- (void)appleAccountSignedIn:(id)arg1;	// IMP=0x00100000000bd87b
- (void)deviceFirstUnlocked:(id)arg1;	// IMP=0x00100000000bd869
- (void)handleManagementChanged:(id)arg1;	// IMP=0x00100000000bd82f
- (void)addObservers;	// IMP=0x00100000000bd6f7
- (void)loadLocalUniqueIDIfNeeded;	// IMP=0x00100000000bd5f4
@property(readonly, nonatomic) _Bool viewSyncing;
- (void)updateLocalLTK;	// IMP=0x00100000000bccdb
- (void)updateLTKs;	// IMP=0x00100000000bcc24
- (void)start;	// IMP=0x00100000000bca57
- (id)init;	// IMP=0x00100000000bc885

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

