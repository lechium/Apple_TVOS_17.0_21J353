//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MADAnalyticsManager, NSDate, NSDateFormatter, NSMutableDictionary, NSOperationQueue, NSString, NSURL, NSURLSession, NSURLSessionConfiguration, PallasResponseVerifier;
@protocol NSURLSessionDelegate, OS_dispatch_queue, OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface DownloadManager : NSObject
{
    _Bool _haveSyncedSplunkData;	// 8 = 0x8
    _Bool _currentlyBatchingSplunk;	// 9 = 0x9
    _Bool _haveSyncedSplunkState;	// 10 = 0xa
    _Bool _timerRunning;	// 11 = 0xb
    _Bool _checkMadeForBeforeFirstUnlock;	// 12 = 0xc
    _Bool _deviceBeforeFirstUnlock;	// 13 = 0xd
    _Bool _performingNSURLSessionSync;	// 14 = 0xe
    NSString *_brainVersion;	// 16 = 0x10
    NSMutableDictionary *_downloadTasksInFlight;	// 24 = 0x18
    NSMutableDictionary *_cachedMetaDataForAssetType;	// 32 = 0x20
    NSURLSessionConfiguration *_backgroundDiscretionaryConfiguration;	// 40 = 0x28
    NSURLSessionConfiguration *_splunkDiscretionaryConfiguration;	// 48 = 0x30
    NSURLSessionConfiguration *_inProcessConfig;	// 56 = 0x38
    NSOperationQueue *_operationQueue;	// 64 = 0x40
    NSOperationQueue *_splunkOperationQueue;	// 72 = 0x48
    id <NSURLSessionDelegate> _delegate;	// 80 = 0x50
    id <NSURLSessionDelegate> _splunkDelegate;	// 88 = 0x58
    NSURLSession *_backgroundSession;	// 96 = 0x60
    NSURLSession *_splunkSession;	// 104 = 0x68
    NSURLSession *_pallasSession;	// 112 = 0x70
    NSURLSession *_inProcessSession;	// 120 = 0x78
    NSObject<OS_dispatch_queue> *_downloadStateQueue;	// 128 = 0x80
    NSObject<OS_dispatch_queue> *_splunkStateQueue;	// 136 = 0x88
    NSObject<OS_dispatch_queue> *_ssoQueue;	// 144 = 0x90
    long long _currentState;	// 152 = 0x98
    PallasResponseVerifier *_pallasVerifier;	// 160 = 0xa0
    NSDateFormatter *_dateFormatter;	// 168 = 0xa8
    NSURL *_splunkUrl;	// 176 = 0xb0
    NSMutableDictionary *_currentSplunkEvent;	// 184 = 0xb8
    NSObject<OS_dispatch_source> *_timer;	// 192 = 0xc0
    NSDate *_previousTimeEstimatePoint;	// 200 = 0xc8
    CDUnknownBlockType _timerHandler;	// 208 = 0xd0
    NSObject<OS_dispatch_queue> *_deviceStatusQueue;	// 216 = 0xd8
    NSObject<OS_dispatch_queue> *_dedupNSURLSessionSyncQueue;	// 224 = 0xe0
}

+ (_Bool)isDeviceBeforeFirstUnlock;	// IMP=0x00600000000abafa
+ (id)_extractCheckedNSErrorFromDict:(id)arg1 withKey:(id)arg2;	// IMP=0x006000000009a076
+ (id)pathToCatalogLookupServer:(id)arg1 usingDownloadOptions:(id)arg2;	// IMP=0x0060000000098be2
+ (int)triggerVPN;	// IMP=0x0060000000095754
- (void).cxx_destruct;	// IMP=0x00000000000ac10f
@property(nonatomic) _Bool performingNSURLSessionSync; // @synthesize performingNSURLSessionSync=_performingNSURLSessionSync;
@property(nonatomic) _Bool deviceBeforeFirstUnlock; // @synthesize deviceBeforeFirstUnlock=_deviceBeforeFirstUnlock;
@property(nonatomic) _Bool checkMadeForBeforeFirstUnlock; // @synthesize checkMadeForBeforeFirstUnlock=_checkMadeForBeforeFirstUnlock;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dedupNSURLSessionSyncQueue; // @synthesize dedupNSURLSessionSyncQueue=_dedupNSURLSessionSyncQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *deviceStatusQueue; // @synthesize deviceStatusQueue=_deviceStatusQueue;
@property(copy, nonatomic) CDUnknownBlockType timerHandler; // @synthesize timerHandler=_timerHandler;
@property(nonatomic) _Bool timerRunning; // @synthesize timerRunning=_timerRunning;
@property(retain, nonatomic) NSDate *previousTimeEstimatePoint; // @synthesize previousTimeEstimatePoint=_previousTimeEstimatePoint;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) NSMutableDictionary *currentSplunkEvent; // @synthesize currentSplunkEvent=_currentSplunkEvent;
@property(retain, nonatomic) NSURL *splunkUrl; // @synthesize splunkUrl=_splunkUrl;
@property(retain, nonatomic) NSDateFormatter *dateFormatter; // @synthesize dateFormatter=_dateFormatter;
@property(retain, nonatomic) PallasResponseVerifier *pallasVerifier; // @synthesize pallasVerifier=_pallasVerifier;
@property(nonatomic) _Bool haveSyncedSplunkState; // @synthesize haveSyncedSplunkState=_haveSyncedSplunkState;
@property(nonatomic) _Bool currentlyBatchingSplunk; // @synthesize currentlyBatchingSplunk=_currentlyBatchingSplunk;
@property(nonatomic) _Bool haveSyncedSplunkData; // @synthesize haveSyncedSplunkData=_haveSyncedSplunkData;
@property long long currentState; // @synthesize currentState=_currentState;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *ssoQueue; // @synthesize ssoQueue=_ssoQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *splunkStateQueue; // @synthesize splunkStateQueue=_splunkStateQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *downloadStateQueue; // @synthesize downloadStateQueue=_downloadStateQueue;
@property(retain, nonatomic) NSURLSession *inProcessSession; // @synthesize inProcessSession=_inProcessSession;
@property(retain, nonatomic) NSURLSession *pallasSession; // @synthesize pallasSession=_pallasSession;
@property(retain, nonatomic) NSURLSession *splunkSession; // @synthesize splunkSession=_splunkSession;
@property(retain, nonatomic) NSURLSession *backgroundSession; // @synthesize backgroundSession=_backgroundSession;
@property(retain, nonatomic) id <NSURLSessionDelegate> splunkDelegate; // @synthesize splunkDelegate=_splunkDelegate;
@property(retain, nonatomic) id <NSURLSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSOperationQueue *splunkOperationQueue; // @synthesize splunkOperationQueue=_splunkOperationQueue;
@property(retain, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain, nonatomic) NSURLSessionConfiguration *inProcessConfig; // @synthesize inProcessConfig=_inProcessConfig;
@property(retain, nonatomic) NSURLSessionConfiguration *splunkDiscretionaryConfiguration; // @synthesize splunkDiscretionaryConfiguration=_splunkDiscretionaryConfiguration;
@property(retain, nonatomic) NSURLSessionConfiguration *backgroundDiscretionaryConfiguration; // @synthesize backgroundDiscretionaryConfiguration=_backgroundDiscretionaryConfiguration;
@property(retain, nonatomic) NSMutableDictionary *cachedMetaDataForAssetType; // @synthesize cachedMetaDataForAssetType=_cachedMetaDataForAssetType;
@property(retain, nonatomic) NSMutableDictionary *downloadTasksInFlight; // @synthesize downloadTasksInFlight=_downloadTasksInFlight;
@property(retain, nonatomic) NSString *brainVersion; // @synthesize brainVersion=_brainVersion;
- (void)activityNotification:(id)arg1 ofStatusChange:(unsigned long long)arg2 withReason:(id)arg3;	// IMP=0x00000000000aba21
- (id)lastModifiedDateFromResponse:(id)arg1;	// IMP=0x00000000000ab80c
- (void)indicateDownloadJobFinished:(int)arg1 usingXPCConnection:(id)arg2 withXPCMessage:(id)arg3 performingAutoAssetJob:(id)arg4 ofJobType:(id)arg5;	// IMP=0x00000000000ab588
- (void)handleSuccessfulDownload:(id)arg1 task:(id)arg2 taskId:(id)arg3 shouldMove:(_Bool)arg4 extractorExists:(_Bool)arg5 postedDate:(id)arg6 notModified:(_Bool)arg7;	// IMP=0x00000000000ab035
- (long long)processAssetDownload:(id)arg1 with:(id)arg2 and:(id)arg3 shouldMove:(_Bool)arg4 extractorExists:(_Bool)arg5;	// IMP=0x00000000000aae49
- (long long)massagePmvAndPersist:(id)arg1 from:(id)arg2 to:(id)arg3 postedDate:(id)arg4;	// IMP=0x00000000000aaa8b
- (void)taskFinishedUpdateState:(id)arg1 with:(long long)arg2;	// IMP=0x00000000000aaa76
- (void)taskFinishedUpdateState:(id)arg1 with:(long long)arg2 extraInfo:(id)arg3;	// IMP=0x00000000000aa444
- (void)retryTask:(id)arg1 retryUrl:(id)arg2 modified:(id)arg3 clientName:(id)arg4;	// IMP=0x00000000000a9fdd
- (id)currentConfig;	// IMP=0x00000000000a9fab
- (id)currentSession;	// IMP=0x00000000000a9f76
- (void)sendNotification:(id)arg1 suffix:(id)arg2;	// IMP=0x00000000000a9f01
- (void)sendNotification:(id)arg1;	// IMP=0x00000000000a9c67
- (void)registerCatalogDownloadJob:(id)arg1 withPurpose:(id)arg2 usingDownloadOptions:(id)arg3 usingXPCConnection:(id)arg4 withXPCMessage:(id)arg5 performingAutoAssetJob:(id)arg6 asClientName:(id)arg7;	// IMP=0x00000000000a8d21
- (void)registerCatalogDownloadJob:(id)arg1 forAssetType:(id)arg2 withPurpose:(id)arg3 usingDownloadOptions:(id)arg4 forAutoAssetName:(id)arg5;	// IMP=0x00000000000a8cf1
- (void)registerXmlDownloadJob:(id)arg1 using:(id)arg2 with:(id)arg3 clientName:(id)arg4;	// IMP=0x00000000000a89dd
- (void)registerPmvDownloadJob:(id)arg1 using:(id)arg2 with:(id)arg3 clientName:(id)arg4;	// IMP=0x00000000000a845f
- (void)registerAssetDownloadJob:(id)arg1 withPurpose:(id)arg2 usingDownloadOptions:(id)arg3 forAssetId:(id)arg4 withBase:(id)arg5 relativeTo:(id)arg6 startingAt:(id)arg7 withLength:(id)arg8 extractWith:(id)arg9 allocateExtractorIfNecessary:(_Bool)arg10 usingXPCConnection:(id)arg11 withXPCMessage:(id)arg12 clientName:(id)arg13 performingAutoAssetJob:(id)arg14 notify:(unsigned long long)arg15 withCatalogMetadata:(id)arg16;	// IMP=0x00000000000a7b29
- (void)registerAssetDownloadJob:(id)arg1 forAssetType:(id)arg2 withPurpose:(id)arg3 clientName:(id)arg4 usingDownloadOptions:(id)arg5 forAssetId:(id)arg6 withCatalogMetadata:(id)arg7;	// IMP=0x00000000000a78d7
- (void)registerAssetDownloadJob:(id)arg1 forThis:(id)arg2 withBase:(id)arg3 relativeTo:(id)arg4 startingAt:(id)arg5 withLength:(id)arg6 extractWith:(id)arg7 allocateExtractorIfNecessary:(_Bool)arg8 connection:(id)arg9 message:(id)arg10 clientName:(id)arg11 notify:(unsigned long long)arg12 withCatalogMetadata:(id)arg13;	// IMP=0x00000000000a7487
- (_Bool)checkPmvDownloadIsSkipped:(id)arg1 connection:(id)arg2 with:(id)arg3;	// IMP=0x00000000000a7383
- (_Bool)checkCatalogDownloadIsSkipped:(id)arg1 connection:(id)arg2 with:(id)arg3 autoAssetJob:(id)arg4;	// IMP=0x00000000000a726f
- (_Bool)checkAssetDownloadIsSkipped:(id)arg1 connection:(id)arg2 with:(id)arg3 autoAssetJob:(id)arg4;	// IMP=0x00000000000a715b
- (_Bool)checkDownloadIsSyncing:(id)arg1 using:(id)arg2 with:(id)arg3 autoAssetJob:(id)arg4;	// IMP=0x00000000000a708f
- (void)updateProgressIfRequired:(id)arg1 totalWritten:(long long)arg2 totalExpected:(long long)arg3 notify:(_Bool)arg4;	// IMP=0x00000000000a6ac8
- (void)startDownloadAndUpdateState:(id)arg1 for:(id)arg2 startingAt:(id)arg3 withLength:(id)arg4 extractWith:(id)arg5 modified:(id)arg6 options:(id)arg7 downloadSize:(long long)arg8 using:(id)arg9 with:(id)arg10 clientName:(id)arg11 autoAssetJob:(id)arg12 ofJobType:(id)arg13 notify:(unsigned long long)arg14;	// IMP=0x00000000000a59df
- (id)MACopyDawToken:(id)arg1;	// IMP=0x00000000000a5988
- (_Bool)downloadNeedsSSO:(id)arg1 taskDescriptor:(id)arg2 url:(id)arg3;	// IMP=0x00000000000a5980
- (id)copyDawTokenFileName;	// IMP=0x00000000000a56a0
- (void)assessDownloadCompletion:(id)arg1 originalUrl:(id)arg2 taskDescription:(id)arg3 taskId:(id)arg4 error:(id)arg5 moveFile:(_Bool)arg6 extractorExists:(_Bool)arg7;	// IMP=0x00000000000a5207
- (void)addLiveServerRequest:(id)arg1 forAssetType:(id)arg2 withPurpose:(id)arg3 audience:(id)arg4 pallasUrl:(id)arg5 using:(id)arg6 with:(id)arg7 clientName:(id)arg8 autoAssetJobID:(id)arg9 task:(id)arg10 options:(id)arg11;	// IMP=0x00000000000a4dd4
- (void)startDownloadAndUpdateState:(id)arg1 for:(id)arg2 modified:(id)arg3 options:(id)arg4 using:(id)arg5 with:(id)arg6 clientName:(id)arg7 autoAssetJob:(id)arg8 ofJobType:(id)arg9;	// IMP=0x00000000000a4c84
- (id)downloadManagerDecodeClasses;	// IMP=0x00000000000a4c7a
- (long long)massageXmlAndPersist:(id)arg1 from:(id)arg2 to:(id)arg3 with:(id)arg4 postedDate:(id)arg5 considerCaching:(_Bool)arg6;	// IMP=0x00000000000a45f5
- (long long)massageXmlAndPersist:(id)arg1 catalogInfo:(id)arg2 descriptor:(id)arg3 assets:(id)arg4 transformations:(id)arg5 to:(id)arg6 postedDate:(id)arg7 receiptResults:(id *)arg8 assetSetId:(id)arg9 pallasUrl:(id)arg10 considerCaching:(_Bool)arg11;	// IMP=0x00000000000a3e51
- (void)applyTransformsAndCheckReceipts:(id)arg1 transformations:(id)arg2 assetType:(id)arg3 assets:(id)arg4 receiptResults:(id *)arg5;	// IMP=0x00000000000a363e
- (void)applyTransforms:(id)arg1 toAssets:(id)arg2;	// IMP=0x00000000000a31c3
- (id)startDownloadTask:(id)arg1 downloadSize:(long long)arg2 for:(id)arg3 startingAt:(id)arg4 withLength:(id)arg5 extractWith:(id)arg6 options:(id)arg7 modified:(id)arg8 session:(id)arg9;	// IMP=0x00000000000a307d
- (id)startDownloadTask:(id)arg1 downloadSize:(long long)arg2 for:(id)arg3 startingAt:(id)arg4 withLength:(id)arg5 extractWith:(id)arg6 options:(id)arg7 modified:(id)arg8 session:(id)arg9 isCachingServer:(_Bool)arg10;	// IMP=0x00000000000a2547
- (void)getCurrentInflightDownloads:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a1f90
- (void)syncSplunkTasks;	// IMP=0x00000000000a1bfd
- (void)pallasRequestV2:(id)arg1 normalizedType:(id)arg2 withPurpose:(id)arg3 options:(id)arg4 using:(id)arg5 with:(id)arg6 autoAssetJob:(id)arg7 clientName:(id)arg8 then:(CDUnknownBlockType)arg9;	// IMP=0x000000000009f51f
- (id)addSUOptions:(id)arg1 options:(id)arg2;	// IMP=0x000000000009f0a0
- (id)newAssetAudience:(_Bool)arg1 assetType:(id)arg2;	// IMP=0x000000000009eda7
- (_Bool)getPallasEnabledForAssetType:(id)arg1;	// IMP=0x000000000009eaf8
- (void)setPreviousBatchedFailureEvent:(id)arg1 inSendEventsByUUID:(id)arg2;	// IMP=0x000000000009e996
- (void)augmentSplunkEvent:(id)arg1 withResultForHTTPStatusCode:(long long)arg2;	// IMP=0x000000000009e90a
- (void)checkSplunkStatus:(id)arg1 failureReason:(id)arg2 productVersion:(id)arg3 sessionId:(id)arg4 nonce:(id)arg5 url:(id)arg6 statusCode:(long long)arg7 assetAudience:(id)arg8 version:(id)arg9 receiptResults:(id)arg10 baseUrl:(id)arg11 discretionary:(_Bool)arg12;	// IMP=0x000000000009dc5a
- (id)newDefaultEventDictionary:(id)arg1 sessionId:(id)arg2 nonce:(id)arg3 url:(id)arg4 statusCode:(long long)arg5 assetAudience:(id)arg6 uuid:(id)arg7 assetType:(id)arg8 version:(id)arg9 receiptResults:(id)arg10 baseUrl:(id)arg11 discretionary:(_Bool)arg12;	// IMP=0x000000000009d325
- (void)isDownloading:(id)arg1 then:(CDUnknownBlockType)arg2;	// IMP=0x000000000009c9f9
- (void)cancelAllDownloading:(id)arg1 withPurpose:(id)arg2 includingAssets:(_Bool)arg3 includingCatalog:(_Bool)arg4 includingOther:(_Bool)arg5 clientName:(id)arg6 then:(CDUnknownBlockType)arg7;	// IMP=0x000000000009c435
- (void)allDownloading:(CDUnknownBlockType)arg1;	// IMP=0x000000000009c16a
- (void)queryNSUrlSessiondAndUpdateState;	// IMP=0x000000000009b258
- (void)updateStateAndNotifyIfRequired;	// IMP=0x000000000009b1f2
- (void)sendDownloadResult:(id)arg1 with:(long long)arg2 extraInfo:(id)arg3;	// IMP=0x000000000009a191
- (void)reportDownloadAttemptResult:(id)arg1 with:(long long)arg2;	// IMP=0x0000000000099585
- (void)sendDownloadCannotStartResult:(long long)arg1 assetType:(id)arg2 connection:(id)arg3 requestMessage:(id)arg4 clientName:(id)arg5 autoAssetJobID:(id)arg6 ofJobType:(id)arg7;	// IMP=0x0000000000098cd8
- (void)cancelAssetDownloadTask:(id)arg1;	// IMP=0x0000000000098a55
- (void)cancelAssetDownloadJob:(id)arg1 forAssetType:(id)arg2 withPurpose:(id)arg3 matchingAssetId:(id)arg4 forAutoAssetName:(id)arg5;	// IMP=0x0000000000098615
- (void)configAssetDownload:(id)arg1 withPurpose:(id)arg2 matchingAssetId:(id)arg3 usingDownloadConfig:(id)arg4 usingXPCConnection:(id)arg5 withXPCMessage:(id)arg6 performingAutoAssetJob:(id)arg7 asClientName:(id)arg8;	// IMP=0x00000000000981b7
- (void)configAssetDownloadJob:(id)arg1 forAssetType:(id)arg2 withPurpose:(id)arg3 matchingAssetId:(id)arg4 usingDownloadConfig:(id)arg5 forAutoAssetName:(id)arg6;	// IMP=0x0000000000098177
- (void)configDownload:(id)arg1 clientName:(id)arg2 using:(id)arg3 with:(id)arg4;	// IMP=0x0000000000097e00
- (void)sendEvents:(id)arg1 sessionId:(id)arg2;	// IMP=0x00000000000976fe
- (_Bool)addInFailedJobs:(id)arg1 finalEvents:(id)arg2;	// IMP=0x0000000000096f7a
- (void)handleSplunkReportFinished:(id)arg1 result:(_Bool)arg2;	// IMP=0x0000000000096ca8
- (void)initializeSessionsAsync;	// IMP=0x0000000000096652
- (void)updateEstimateInfo:(double)arg1;	// IMP=0x00000000000962f6
- (void)startDownloadTimer;	// IMP=0x0000000000095eb0
- (void)stopTimerIfNoDownloadsInProgress;	// IMP=0x0000000000095e1a
@property(readonly, nonatomic) MADAnalyticsManager *analytics;
- (id)getUserAgentStringForClient:(id)arg1 withAssetType:(id)arg2;	// IMP=0x0000000000095cf2
- (id)init;	// IMP=0x0000000000095891

@end

